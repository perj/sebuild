// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../internal/assets/main.go
// ../../internal/tools/copy_analyse.pl
// ../../internal/tools/gperf_enum.pl
// ../../internal/tools/in.pl
// ../../rules/compiler/clang.ninja
// ../../rules/compiler/gcc.ninja
// ../../rules/compiler-flavor/.gitkeep
// ../../rules/defaults.ninja
// ../../rules/flavor/dev.ninja
// ../../rules/flavor/gcov.ninja
// ../../rules/flavor/release.ninja
// ../../rules/rules.ninja
// ../../rules/static.ninja
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _internalAssetsMainGo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\x57\x70\xce\x2f\xa8\x2c\xca\x4c\xcf\x28\x51\x30\x32\x30\xb4\x50\x08\x4e\xce\xc8\x4c\x2a\x2e\x49\x4d\xe1\xe2\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\x4a\x2b\xcd\x4b\x06\x33\x35\x34\x15\xaa\x6b\xb9\x00\x01\x00\x00\xff\xff\xf5\xc9\x7a\xc9\x3a\x00\x00\x00"

func internalAssetsMainGoBytes() ([]byte, error) {
	return bindataRead(
		_internalAssetsMainGo,
		"internal/assets/main.go",
	)
}

func internalAssetsMainGo() (*asset, error) {
	bytes, err := internalAssetsMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/assets/main.go", size: 58, mode: os.FileMode(420), modTime: time.Unix(1560500408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalToolsCopy_analysePl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5f\x73\xda\xba\x12\x7f\xc6\x9f\x62\xeb\x9a\xd8\x34\x0e\x4a\xee\x7d\xb9\xe3\x7f\x13\x4a\x68\x6e\x66\x68\x92\x0b\xdc\xce\xe9\x09\x2d\x63\xb0\x00\x0d\xc6\xf2\x91\x04\x34\x65\xdc\xcf\x7e\x46\xb2\x0c\xa6\x69\xe7\x3c\xf4\x9c\x97\x04\xad\x76\x7f\xbb\xda\xfd\xed\xae\x5f\xbf\x42\x1b\xce\xd0\x94\x64\x08\x67\x5b\xc8\x31\x4b\x8d\xd7\xd0\xa5\xf9\x33\x23\x8b\xa5\x80\x7f\x5d\x5e\xfd\x07\x86\xb3\x25\x99\x72\x81\x13\xc3\xd8\x70\x0c\x5c\x30\x32\x13\xbe\xfa\x7d\x8b\x05\xcd\x85\xe7\xf5\x69\xb6\x28\x25\xef\x48\x8a\x3d\xef\x31\x16\xcb\xfa\xf9\x1d\xc9\x92\xf2\xdc\xdd\xe9\x1f\x8f\x0f\xc3\xbb\xdf\xe0\x8f\x9d\xc3\x05\x9b\x0b\xb2\xc6\x2d\xdf\x30\xd6\xcf\x60\xcd\x49\x16\xa7\xe4\x2b\x86\x10\x2e\x7d\xc3\xb8\xc5\xe2\x21\x17\x84\x66\xdc\x31\xab\x2b\x13\xc2\x08\xc6\x07\xcd\xca\x92\x6e\x44\xbe\x11\x10\x4a\x27\x9e\x17\x4f\xf9\x24\x8f\xc5\xd2\xe1\x4b\x32\x17\x52\xe7\x18\x9b\xe7\x31\xbc\xa6\x5b\x3c\x11\x0c\x63\x47\x1b\xba\xb0\x87\x15\xc6\xf9\x84\x51\x2a\xa4\x87\x2b\x28\x5a\xbe\xb1\x5e\x25\x84\x55\x3a\x12\x86\x6f\xa6\xb0\xc0\x19\x66\xb1\xc0\x13\x92\x25\xf8\x8b\x63\xb5\x60\x6f\x34\x64\x0c\x9c\xcd\x12\xc2\x20\x04\x6b\xf2\x74\xf9\xc9\x37\x94\xb4\xa9\xb4\x20\x04\x47\xda\x37\x8e\x39\xf1\xbc\x39\xc9\x12\x67\xbf\x8b\x33\x81\x13\xe9\x53\x82\xef\x8d\x46\x23\xc3\x5f\x04\x90\x39\xbc\x42\xe3\xf6\x52\xac\x53\x0b\x49\xcb\xca\x85\xc2\x57\x02\x9a\xe3\x0c\x86\x83\xae\x0b\x76\x60\xbb\xe5\x25\x65\x90\x10\x0c\xe6\xbb\x98\xa4\x38\x01\x41\x41\x69\xc9\x3b\xd3\x2f\x41\xae\x65\x9c\xb1\x88\x21\x84\x60\x38\xe8\x46\x52\x3c\x4b\x29\xc7\x12\xab\xf2\x74\x2d\x88\x48\x31\x87\x10\xd6\x71\x0e\xe8\x73\xa0\xce\x91\xd3\x7e\xd3\x0a\xc6\xa8\x3c\x58\xc8\x3d\x80\x69\xec\xe6\x1a\x2b\x60\x6d\xf4\xea\xe2\x02\xde\xfe\xff\xd6\x79\xfa\x0c\x9f\xce\x5b\x20\xad\xe1\xe2\xe2\x85\x21\x99\x83\xa3\x1d\xaa\x64\x36\x1a\x96\xc4\xd9\xdb\x9c\xcd\xec\x42\x3e\x98\xb3\x99\x54\x6c\xec\x96\x24\xc5\xe0\x80\x23\x93\xb1\x72\x41\xfe\xdb\xb6\x20\x04\x1c\xcf\x96\xa5\x77\x8d\xd0\xb0\xb6\x10\x7e\x03\x8e\x02\x74\x96\x0a\x1f\x2d\xfc\x13\x69\x84\xce\x16\x35\xa9\x72\x67\xad\x94\xaf\xad\x92\x15\xf2\x4f\xbe\xe1\x4b\xb8\xde\x5b\xaa\x86\x7b\xab\x0c\xf1\xe9\xf2\x53\x51\xb8\x30\x56\xde\xa4\x6e\x61\x18\x0d\x29\xd1\x04\x50\x75\x56\x59\xbf\x19\x8e\x5c\xb0\x23\xdb\x05\x53\xdf\x21\x85\xa4\xaa\x6a\xfe\xb4\x56\x25\xdd\x6a\xaa\x30\xa7\x0c\x4a\xa9\xa9\x69\x65\x65\x74\x07\x21\x54\x0d\x04\x66\x33\x86\xe6\x14\x9a\x18\x9a\x1f\x21\x16\xd0\xfc\xaf\xd7\x7c\xef\x35\x87\xa6\x0b\x8b\xb5\xd4\xf0\x4b\x33\x86\x73\xca\x04\xd7\x0d\xd6\xc8\x19\xc9\x84\x8c\x13\xcc\x40\x7a\x8a\x82\x25\x8e\x93\x48\x57\x7b\x96\xc6\xd9\x02\xe2\x2c\x4e\x9f\xbf\x62\x28\x4d\x5d\xe5\x3a\xd0\x14\x08\x90\xd2\x1f\x67\xc1\x94\x26\xcf\xd1\x38\x93\x24\xab\x83\xe6\xd1\x40\x99\x1d\xba\x26\xd1\xf6\xf9\x0f\x94\x93\x54\x0b\xe7\x94\xa9\x82\xaa\x2a\x83\x03\x5c\x22\xac\xf0\x33\xaf\xda\xa9\x2c\x72\xf9\x20\xf9\x18\x33\x48\x44\x64\xad\x02\x94\x08\x19\x4c\x92\x44\x01\xad\xc0\x14\x9d\x65\xad\xa4\xa2\x42\xda\x83\x15\x5f\x44\x7b\xbb\x7f\x77\xdf\xb3\x0b\x08\xc2\x08\xac\x69\x4d\x50\xd4\x6a\xbe\x2a\x0a\x89\x51\x8f\x48\x71\xdc\x29\x21\x35\xdb\xa4\x38\x25\xd9\x0a\xda\xa1\x22\x94\x1d\xa4\x24\x0a\x78\x1e\x67\xa0\x12\x15\x9a\x76\x5b\xd9\x49\x2f\xdd\xce\xa8\x77\xfb\x30\xf8\x68\x17\x6d\xdb\x83\xda\xc5\xe8\xe3\x63\x4f\x0a\xcd\xc8\x86\xb6\xc6\x89\x61\xc9\xf0\xfc\xc4\x5e\x75\x45\xdb\x7e\xdd\xcb\x12\x39\xd0\xcc\x28\x25\x19\xae\xe3\x94\xcf\x68\x9b\x01\x8a\x23\x0f\xcc\xe3\xc5\x4d\x6f\xd8\x2d\x2f\x64\x68\x51\x80\x52\x52\x25\xa9\xa1\x32\xd9\x0e\xcb\x77\x28\xc9\xf9\x79\x45\x97\x92\xe5\x47\x1d\x33\x40\x34\x8d\x02\x94\x24\x95\xf9\xb1\x8c\x52\xc7\x37\x54\x53\xc8\xbe\x3e\x32\x2e\x84\xcb\x32\x5b\x27\x25\x17\xd1\x3d\x05\xcc\x18\x65\x5c\x33\x0c\x27\x6d\x5d\x47\x53\xe3\xd4\x0d\xd0\x81\x24\x27\x52\x4d\xbf\x00\x29\x16\x2b\x05\xa3\x9c\x6a\xce\xcd\x70\xa4\x5a\x92\x61\xb1\x61\x19\x1c\xdf\x54\x54\x6b\xe1\x6f\x18\xc7\xe5\x39\xe1\xe2\x30\xad\xfe\xe1\x01\x6d\xcd\xe3\x94\xe3\x49\x4e\x39\x11\x64\xab\x37\x66\xa3\x81\x3e\x97\xcf\xbb\x40\x70\x76\x06\x09\x3d\xd2\x53\xf1\xd0\xaf\x4e\xd3\xcd\x22\xcd\x36\x6b\xbf\x46\xde\x03\x86\x24\x3b\x38\x55\x14\xd5\x3c\x4d\x63\xae\xd2\xf0\x9d\x63\x3d\x40\xa5\xfd\xf9\xb9\x3e\x28\x57\x32\x11\x57\xd2\xe0\x67\xcb\x43\x2b\xeb\x48\xea\xea\x7a\x6d\x48\x1a\xd7\x76\x86\xd6\x7f\xf1\x6e\x65\x75\x80\x39\x3b\x03\x44\x92\xd0\xec\xdf\x57\x22\xb3\xfd\x66\xd4\xb9\xeb\xff\x6f\x32\xe8\xbd\x7f\xf8\xd0\xfb\x15\x9c\xc1\xdb\xc9\x6d\xef\xbe\x37\xe8\x8c\x7a\x93\xe1\xa8\x33\xba\xeb\xfe\x0a\x5a\xa7\xdf\x7f\xe8\x4e\x1e\x7b\x83\xf7\x9d\xfb\xde\xfd\x68\xf2\xfb\x87\x4e\x1f\x1d\x97\x8f\xea\x1e\x95\xac\xc3\x4a\xd3\x89\xfd\x06\xdc\x45\xee\x64\xe2\x56\xeb\x4b\xf1\x4e\xae\x35\x5d\x7d\x54\x6a\x1e\xc1\x0a\x45\x9b\x8a\xc9\x2f\x4a\x58\x71\xb5\xbe\xb0\xf4\x16\x92\xd8\x7f\xb9\xaa\x94\xd2\xe9\x18\xa8\xef\xf7\xd3\x3e\x2c\x8c\xc2\x85\xeb\xce\xe0\xf6\x43\x4b\x06\xa3\x7e\xf9\x86\xa1\x9e\x7b\xf8\xac\xab\xbe\xa9\x8e\xfb\xea\xfb\xcf\xae\xc3\x47\xd9\xe9\x98\x89\x4e\xa7\xcc\x70\x74\xd3\x1b\x0c\xc0\x1c\xe3\xa7\x7f\x5f\xf9\x57\xeb\x11\x15\x71\x0a\x74\x0e\x26\xb4\x8f\xe8\x6d\x30\xf5\xf0\xe1\x63\xfc\x74\xb9\x3e\x19\x6a\x15\xc4\x9a\x66\x0b\x2a\xbb\xf0\x82\x55\x0f\xff\xa1\x9e\xa0\x90\xc6\x9b\x6c\xb6\x84\x1d\x9e\x02\xc7\x6c\x8b\x99\x2b\x33\x38\x65\x74\xc7\xb1\x4c\xde\x5c\x8e\x1d\x84\x52\x3a\x8b\xd3\x25\xe5\x02\xbd\xdc\xf9\x1a\x1a\x7f\x21\xc2\xb9\x6a\xa9\x41\x58\x18\xc6\x9f\x01\x00\x00\xff\xff\xf0\xe2\x95\x42\xb5\x0b\x00\x00"

func internalToolsCopy_analysePlBytes() ([]byte, error) {
	return bindataRead(
		_internalToolsCopy_analysePl,
		"internal/tools/copy_analyse.pl",
	)
}

func internalToolsCopy_analysePl() (*asset, error) {
	bytes, err := internalToolsCopy_analysePlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/tools/copy_analyse.pl", size: 2997, mode: os.FileMode(493), modTime: time.Unix(1560500408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalToolsGperf_enumPl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xeb\x6f\xdb\x36\x10\xff\x6c\xfe\x15\x57\xc5\x86\x25\xc7\x92\xe2\x6e\x1f\x06\xa8\x6e\x17\xa4\x5e\x31\xa0\x4d\x86\x3e\x07\x44\x8e\xc0\x48\xb4\x4d\x4c\xa6\x34\x92\x72\x12\xb8\xce\xdf\x3e\x1c\xa9\x87\x9d\x07\x86\xa2\x5f\x0c\xf2\xee\xf8\xbb\x87\xee\x77\xe7\xa3\x17\x61\xa5\x64\x78\xcd\x45\x58\x32\x99\x93\x23\x38\x2b\xca\x3b\xc9\x97\x2b\x0d\x2f\x4f\x26\xbf\xc1\xa7\x74\xc5\xaf\x95\x66\x19\x21\x95\x62\xa0\xb4\xe4\xa9\x8e\x08\x59\xdf\x41\x5f\x15\x95\x4c\x19\x4c\xc1\xed\x9f\x7e\x7c\xf7\xf5\xf2\x64\x0e\xec\x5f\x18\xfa\x6a\xe8\x45\x44\xad\xf8\x42\x03\x5f\x34\x66\xf5\x9b\xa2\xd2\x65\xa5\x61\x0a\x46\x1f\x91\x34\x2f\x14\x73\x3f\x7d\x7e\x7b\xf1\xe5\xb3\x17\x91\xa2\x64\xa2\xbe\x8d\x61\xf8\x7a\x38\x6e\x5e\x78\x50\x48\xc8\x38\x03\xe7\x8c\x8a\xa1\x06\x34\x6c\xd1\x16\x85\x84\x1b\xc9\x35\x17\x4b\x27\x22\xa4\x75\x72\x0f\xe1\x55\x30\x7a\xe3\x5e\x5e\xc5\xe1\xfc\xd8\x8b\x03\x3c\x05\xf3\x63\xaf\x1f\xb6\x70\xa9\x81\x2b\xa9\x54\x0c\xd8\xad\x66\x42\xf1\x42\xc0\x42\x16\xeb\x06\xde\x89\x4c\xe4\x82\xae\x31\xd7\xfe\xa4\xce\xa4\x94\x6c\xc1\x6f\x61\x0a\x55\x0a\xae\xd1\x7a\x11\x69\xa5\xf7\xa0\x42\xf7\xf2\x2a\x99\x7b\xf8\x33\x72\x93\xef\x7d\x2f\x8c\x27\xe1\xb2\xb3\x09\xa6\x30\x4c\x86\x11\x21\xa5\xe4\x42\x83\xa3\xb4\xac\x52\x0d\xfd\x2d\x62\xed\x12\xc9\xd2\x28\x16\x4e\xd4\xa8\x99\xa8\xd6\x75\x14\xdb\x58\xc4\x3a\xd6\xfd\xad\x45\xda\x9d\x5f\x9c\xcf\x9c\x3a\xac\x8c\xa5\x79\xc2\x6e\xb5\xa4\x26\xec\xdf\x17\x9c\xe5\x99\xb2\xe7\x4e\xdc\x47\xb0\x29\x9c\xd8\x8b\xd2\x54\x6a\x96\x75\x82\xfc\x40\x2d\x8a\x94\x2a\x16\x91\x9b\x15\xcf\x19\xb8\xaf\x5e\x7b\xb0\x25\xbd\x74\x55\xac\xcb\x88\xf4\x8c\xf1\xf1\x71\x44\x48\x0f\x8d\x8d\xbf\xc8\x9e\x6b\x7f\xe6\xbc\xa1\x79\x65\xea\x87\xe6\x68\xcc\x17\xe0\xd6\xbd\x61\xf0\x8c\xe0\x45\x13\x8b\x15\xf5\xf6\x42\x9b\x60\x33\x85\xef\xfe\x9a\x7d\xfc\x23\x99\x9d\x7f\xf9\xe0\x26\xe7\x17\x67\xa7\x9f\x66\xde\x9b\xd8\x96\xdf\x8d\xdc\x60\xe4\x79\x6f\x62\x2f\x8c\xcc\x5b\x1b\x37\x4c\xc1\x19\xf0\xa5\x28\x24\xf3\xf1\xee\x98\xa6\x9c\x80\x60\x30\x1c\x5a\xc3\xae\x66\x18\xe0\x2f\x8f\x84\xf8\xa5\xa2\xa1\x79\xb7\x27\x7d\x71\x0f\x61\xd4\xb7\xbe\x04\xbb\xd5\x78\xd8\x91\x5e\x2f\xa7\x4a\x3f\x88\x35\xc4\x84\x4d\x82\xb5\x10\x03\x8f\x5d\xc7\xc5\x86\x8c\x9d\xf9\xf7\x38\x0e\xbc\x91\xe7\xb8\x97\x57\xde\x7c\xe4\x85\x4d\xf6\xa6\x98\x75\xd3\xe1\xfd\x30\xc6\x1d\xb0\x5c\x3d\x00\x4d\xbe\x9e\xbe\xff\x32\x8b\x11\x78\x3c\x3f\xf6\xc6\xf0\xbf\x3e\xda\x0f\x53\xfb\x68\x7d\xbe\x7c\xe0\xf3\xd7\xd6\x27\xb3\x4f\xf7\x92\xde\x13\x77\x00\x09\x2a\xdb\xf7\xa6\xd8\x3b\x42\x7a\x65\xa5\x56\x4d\x5f\x8e\xbb\x86\xb1\x62\x63\x3d\xee\x5a\xa7\x45\xab\x52\xd7\x9e\xbd\x3d\xe9\x3d\x68\x19\xfa\x61\x82\x1f\xa1\xa6\xc9\xb8\x61\xa6\x03\x41\x0d\x0e\x01\x38\x18\x8f\xc9\xd4\xc1\xe7\x75\xc7\xee\x1a\xee\xbd\x7a\x35\xbb\xf8\x4c\x76\x11\x79\xcc\x41\xd3\xea\x85\x50\x1a\xd2\x15\x95\x30\x42\x45\x44\x7a\x96\x8d\xd6\x0c\x36\x34\x47\xd4\xae\x37\x10\x8a\xc4\x03\x8b\xe6\xeb\xbb\x92\x91\x78\x90\xb1\x05\x17\x0c\x56\x54\xad\xfc\x45\x25\x52\xcd\x0b\xe1\x1b\x3e\x37\xee\x50\xd5\x19\xe6\x45\xf1\x4f\x55\x3e\x63\x6a\x95\x24\x1e\x48\x46\xb3\x42\xe4\x77\xbe\xa6\xd7\x39\x53\xb1\x20\xf1\x00\x83\x23\xf1\x20\x2d\xd6\x25\x95\xcc\x57\x5a\x8a\x74\x5d\x76\xc8\x38\xc5\xc5\xd2\x2f\x8b\x22\x3f\x44\xb5\x0a\xd5\x59\xde\x14\x32\xf3\xa9\x94\xf4\xee\xd0\x10\xe5\x8a\xd4\x0c\x23\x64\xb0\x25\x58\xc0\x76\x56\x1d\xd5\xcf\x3f\x9c\xfe\x9d\xb4\x53\xea\xdb\xc5\xc7\xb7\x66\xf0\xc4\xc2\x70\x10\xc9\x6e\xe9\x1f\x1d\x7c\x06\x72\xc4\x17\x22\x63\x0b\x90\x6c\xc9\x95\x66\x92\x34\x70\x9d\x80\x89\x8c\x2f\x08\x39\x2a\x25\x5d\xae\x29\xbc\x3b\x3b\x83\x8c\xd3\xa5\x28\x94\xe6\x29\x60\x2b\x3d\xa7\xb3\x93\x20\x03\xc7\xff\xb6\xe6\x4a\x61\x1d\xf0\xbb\x51\x49\xb1\xc8\xca\x41\xef\x60\xfd\x65\x90\x24\x69\x4e\xc5\x32\x49\x5a\x34\x73\x7f\xd6\xd7\x23\xed\x9e\x37\xa5\xa9\xe6\xa9\xcf\x85\xcf\x45\xce\x05\x73\xda\x2c\x06\xbb\xba\x7a\x4d\xf9\xe2\x41\x3c\x30\xa3\x9f\xe0\x66\xc3\xe9\xc9\xc1\x3d\x81\x20\x80\xfe\x91\xe5\x8d\x21\xaf\x19\xab\xfb\xd4\x50\x97\x7d\x3e\x37\xfc\xd8\x3c\xc5\x8d\x3d\x23\xa4\xc4\x21\x53\x36\xf8\x63\x9a\xb7\xd1\x9b\x08\x1e\x50\x04\x23\x23\xc4\xa6\x42\xf6\x36\x92\x6d\xc7\xc4\x5e\xdc\x7d\xbe\x28\x2d\xc7\x80\x00\x39\x13\x1e\x24\x09\xd5\x5a\xf2\xeb\x4a\xb3\x24\x71\xdd\x4a\x54\x8a\x65\x9e\x17\xfd\x0c\xe6\xd6\xee\x92\x9c\x09\x98\x4e\xc1\x9f\x78\x38\x83\xf1\x82\x7d\x8e\x07\x57\x69\x89\x55\xb1\x10\x4f\x50\x7c\xb4\xa1\x39\x0e\x88\x03\x6e\x99\x67\x63\xe3\xa2\x59\x57\x1b\x9a\x23\xb8\x64\xba\x92\x02\x59\xef\xbf\xb6\xd4\xaf\x25\x07\x0b\xd9\xd4\xae\xce\xca\xc4\x5a\xa7\x53\x3b\x41\xd1\xcf\x14\xea\xc7\x21\xb7\x6d\x9c\x2e\x17\xda\x3b\x2c\xef\x5e\xae\x3b\xf2\xc3\x1c\x28\xca\xa6\x99\x9f\x63\x64\x51\x36\x3d\xfe\x70\xef\x3f\x49\xfd\x6e\x75\xb6\xe4\xdf\xdb\xfc\xb7\xde\x13\xd2\xfa\xef\xc0\x63\xa5\x91\x06\x41\x80\x45\x7d\xff\xe7\xf9\x0c\x33\x79\x64\x60\xf7\xa6\xbb\x19\x83\xb1\x74\x37\x4f\xa1\x24\xf8\x5d\xe1\xa4\xc9\x15\x23\xee\x61\xbd\x22\xf2\x5f\x00\x00\x00\xff\xff\xad\x4c\xc9\xd1\x48\x0b\x00\x00"

func internalToolsGperf_enumPlBytes() ([]byte, error) {
	return bindataRead(
		_internalToolsGperf_enumPl,
		"internal/tools/gperf_enum.pl",
	)
}

func internalToolsGperf_enumPl() (*asset, error) {
	bytes, err := internalToolsGperf_enumPlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/tools/gperf_enum.pl", size: 2888, mode: os.FileMode(493), modTime: time.Unix(1560500408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalToolsInPl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x94\xd1\x73\x9b\x46\x10\xc6\x9f\xe1\xaf\xf8\x84\x21\x02\x5b\xd2\x59\x79\x6a\x2a\xa3\x56\xad\x52\x57\x33\x1d\x65\x26\x96\x3b\xd3\x38\xae\x06\xc1\x22\x5d\x07\xdd\x29\xdc\x11\xd5\x75\xc8\xdf\xde\xb9\x03\x24\xfb\x89\xe1\xbb\x6f\xf7\xf6\xb7\xec\x72\xd1\x63\x95\x2a\xd9\x86\x0b\x76\xa0\xb2\x70\x2f\xf0\xab\x3c\x3c\x95\x7c\xbb\xd3\x78\x7b\x3d\xfe\x01\x77\xe9\x8e\x6f\x94\xa6\xcc\x75\x2b\x45\x50\xba\xe4\xa9\x9e\xb8\xee\xfe\x09\x81\xaa\x36\x88\x11\x46\x13\xf3\xe6\xa7\x52\xe4\x39\x2f\x08\x31\xd4\x8e\xe7\x7a\xe2\xf2\x1c\xe1\x49\x8e\xf0\xec\x3a\xf2\x40\x02\x9d\x79\x00\xef\xc6\x1b\xbc\x08\x94\x25\x32\x4e\xf0\xac\xeb\x24\xff\x08\xbf\xe7\x4d\x5c\xe7\xb8\x33\x9e\xf0\xc6\x1e\x4c\x11\x7f\x07\x0b\x1f\x92\xe1\x7f\xeb\xd9\xf0\xd3\xf5\xf0\xdd\xe3\x55\x14\x87\xa3\xcb\x88\xd9\x8b\x1c\x5f\x55\x9b\x67\x7f\x5c\x23\x86\xff\x76\xe2\x3a\xb5\xeb\xa4\x85\x54\xd4\xe4\x9d\xb8\xb5\x45\xf0\xb9\x30\x57\x34\x00\xb2\xd2\xcd\x4b\xf3\x56\x64\xb2\xd2\x88\xe1\x79\xcd\xb1\xa0\xe3\x59\xb0\xca\x62\x39\x71\x1b\xc8\x26\x4d\x47\x7e\x46\xf5\x17\xcb\x8e\xb2\xb5\xbc\x66\x6c\xc4\x8e\xb0\xab\xa0\xcb\xd3\x99\xfd\x9e\x3d\xec\x0a\xca\x24\x9e\x51\xc8\x34\x29\xc2\x9f\x67\x1f\x6f\xff\x1c\xc0\x67\x91\xe1\xec\x00\x70\x33\x45\x0d\x9e\x63\x48\x2f\xa8\x6a\x50\xa1\xc8\x94\xe6\x2f\x96\x88\x71\x79\xb7\x9a\x1b\x82\xb6\x13\x24\x32\xc4\xe8\xf7\x27\xee\xa9\xd1\x8b\xe5\xd4\xa2\x28\x16\xd8\x76\xf6\x7f\xb9\x5f\xfc\x31\x5f\xdf\xad\x66\xb7\xef\xfb\xb5\x79\x7e\x5c\x05\x9f\x05\x63\x13\xeb\x99\x2d\xff\x7a\xa5\xb9\x0e\x0b\xc2\x87\xd9\xf0\xd3\xe3\x55\x74\x3e\x40\x22\xb2\xee\x36\x7f\xdc\x44\xfa\xcf\x24\xb2\x7a\xfd\x7e\x39\xb7\xa1\x2f\x2d\xa6\x20\x47\xd0\xbf\xda\xf0\x18\xcd\xe4\x55\x2c\x68\xf2\x9e\x42\x8c\x6a\x28\x4a\x52\x5d\xd0\x05\x7e\x93\x25\xe8\x2b\x95\x4f\x50\xb4\xdd\x93\xd0\xd0\xbb\x44\x23\x93\xa4\x44\x5f\x23\x95\x42\x27\x5c\x20\x41\x3f\xe8\x63\x34\x1a\x9d\x66\x6c\xcf\x3e\xdf\x86\x0f\x7f\x07\x8f\x97\x11\xdb\xab\x6d\xda\x8e\x94\x49\x3e\x6a\xab\x76\x2e\xb0\xc8\x71\x34\xf9\x72\x59\x14\xf2\xa8\xd0\x54\xa9\xda\x7c\x8b\xb9\x7d\x28\xfa\x52\x91\x48\x69\x00\xbd\x23\x01\x59\xe9\x43\x65\xea\x20\xa8\x6a\xa3\x34\xd7\x95\xe6\x52\x20\x97\xa5\x15\x17\xf3\x91\xeb\x38\x66\xa6\x4c\x0d\x81\x1d\x70\x43\xda\x3e\xaf\x87\xef\xd6\x8f\x97\x3f\x45\x01\xdb\xa6\x78\xf3\x06\x19\xe5\x5c\x50\x06\x7f\xdc\x94\xe8\xd8\xd9\xaa\x44\xa7\x7f\x4d\x4a\x9e\x6c\x0a\xc2\xd4\x1f\xdf\x60\x38\x85\xbf\xf6\x4c\x23\xc3\xde\x29\xb2\xdd\x93\xc8\x30\x9d\x11\x5b\xd5\x88\x76\x6e\xba\x8a\xc2\xe0\x2a\x62\x5d\x43\xda\x1e\x10\x14\x11\xa4\xb0\xc3\xbd\x97\x25\x59\xf0\xc4\x50\x72\x85\x83\xe4\x42\x0f\xf0\x4f\xa5\x34\x92\x2c\x33\x94\x7b\x68\x69\x69\x9b\x6e\x8c\x5e\xdd\x6c\x9b\x5b\x9b\x85\x35\x9f\xf0\xf7\x44\x64\x05\x59\x73\x3f\x93\xd5\xa6\xa0\x21\xa9\x34\x39\x50\x1f\xc7\x1d\x4f\x77\xa6\xdf\x4a\xee\x49\xf3\x3d\x29\x54\x8a\x32\x70\x61\xed\x47\x5e\x64\x23\xb7\xc9\x1b\x7f\x87\x62\x41\xc0\x02\xb6\x35\x83\xd2\xad\xb2\xb9\xae\x24\x65\x57\xc0\xae\x71\xbb\x2b\x96\xae\x11\x9a\x9d\xa3\x2f\xf0\x3c\x7c\xfb\x86\xde\x4b\xa9\x4d\x13\x35\xcd\x38\xfd\xda\x3e\xdc\xaf\x06\xf0\xa6\x66\xe7\x4f\xbb\xe7\x38\x87\x92\x0b\x6d\x0f\xbb\x38\xa3\xb6\xbf\xa4\x0f\xf7\x2b\xfb\x8b\x3a\xaf\x68\x6b\xef\x9c\xb5\xfb\x7f\x00\x00\x00\xff\xff\x97\x33\x24\x2f\xa9\x05\x00\x00"

func internalToolsInPlBytes() ([]byte, error) {
	return bindataRead(
		_internalToolsInPl,
		"internal/tools/in.pl",
	)
}

func internalToolsInPl() (*asset, error) {
	bytes, err := internalToolsInPlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/tools/in.pl", size: 1449, mode: os.FileMode(493), modTime: time.Unix(1560500408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rulesCompilerClangNinja = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xcd\x31\xae\xc2\x30\x10\x84\xe1\xde\xa7\x18\x29\xb5\x9f\x1e\x54\x34\x34\x70\x04\x90\x28\xa3\x8d\xbd\xc4\x2b\x99\x75\xf0\x3a\x44\xb9\x3d\x0a\x69\x7f\xcd\xe8\xeb\x70\x2d\xd3\x5a\x65\x4c\x0d\xc7\xff\xc3\x09\xb7\x90\x64\xb0\xc6\xd1\xb9\x85\xaa\x86\xf2\x9a\x24\x73\x3d\xfb\x87\x16\x3f\x51\x65\x6d\x89\x8d\xcd\xf3\x7b\xa6\x2c\x6d\x75\xae\xc3\x3d\x89\xe1\x43\x55\x68\xc8\x8c\x40\x8a\x81\x31\x1b\x47\x88\xe2\x32\x4b\x8e\x91\x2d\x18\x5a\x41\x14\xfb\x8d\xda\x76\xd9\x04\xd1\xf1\xcf\x2d\xbd\x96\xde\x38\x3f\x7b\x32\x93\x51\x77\x6e\x0b\x7e\x0f\xee\x1b\x00\x00\xff\xff\xc8\x01\xa3\xc6\xa9\x00\x00\x00"

func rulesCompilerClangNinjaBytes() ([]byte, error) {
	return bindataRead(
		_rulesCompilerClangNinja,
		"rules/compiler/clang.ninja",
	)
}

func rulesCompilerClangNinja() (*asset, error) {
	bytes, err := rulesCompilerClangNinjaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules/compiler/clang.ninja", size: 169, mode: os.FileMode(420), modTime: time.Unix(1560500408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rulesCompilerGccNinja = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcb\x31\x0e\xc2\x30\x0c\x05\xd0\x3d\xa7\xf8\x52\xe7\x22\x60\x62\x61\xe2\x08\x0c\xcc\xc5\x0d\x69\x24\x93\x6f\xd9\x46\xa8\xb7\x67\xe5\x00\x6f\xc2\x8d\xb6\x7b\x6f\x5b\xe2\x7c\x3c\x5d\x70\x97\xad\x3f\x23\xeb\x5a\xca\x04\xd1\x65\x34\xac\xac\x81\xc1\x44\x7c\xcc\xe8\x89\xf9\xa1\x6c\x5d\x16\x9d\x69\x08\x82\x43\x77\x44\x4d\xf4\xc4\x8b\x8e\x26\x72\x28\xdf\xc5\x87\xf0\x6d\x5d\xab\x5f\xff\x45\xf9\x05\x00\x00\xff\xff\xab\xaa\x4a\x08\x74\x00\x00\x00"

func rulesCompilerGccNinjaBytes() ([]byte, error) {
	return bindataRead(
		_rulesCompilerGccNinja,
		"rules/compiler/gcc.ninja",
	)
}

func rulesCompilerGccNinja() (*asset, error) {
	bytes, err := rulesCompilerGccNinjaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules/compiler/gcc.ninja", size: 116, mode: os.FileMode(420), modTime: time.Unix(1560500408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rulesCompilerFlavorGitkeep = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00"

func rulesCompilerFlavorGitkeepBytes() ([]byte, error) {
	return bindataRead(
		_rulesCompilerFlavorGitkeep,
		"rules/compiler-flavor/.gitkeep",
	)
}

func rulesCompilerFlavorGitkeep() (*asset, error) {
	bytes, err := rulesCompilerFlavorGitkeepBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules/compiler-flavor/.gitkeep", size: 0, mode: os.FileMode(420), modTime: time.Unix(1560500408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rulesDefaultsNinja = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x41\x8b\xdb\x40\x0c\x85\xef\xfe\x15\x82\x14\x7a\xa9\x42\xbb\xa7\x5e\x72\xda\x94\xde\xba\xd0\xb0\xb8\xb7\xa0\xcc\xc8\xb6\xc8\x64\x64\x24\xd9\x89\xfb\xeb\x8b\x77\xd3\x2d\x0b\xbd\x09\xe9\xcd\x7b\xdf\x63\x36\xf0\xa8\xe3\x62\xd2\x0f\x01\x0f\x9f\xbf\x7c\x85\x43\x1a\xe4\xe4\xc1\xb9\x69\x36\xb0\xe7\x8e\xa6\x12\x30\x53\x99\xd8\xa1\x53\x83\x99\x4c\xe8\x54\xd8\x41\xbb\xe0\x0a\x3a\xb3\x99\xe4\xcc\x15\x4e\x0b\x74\x85\x66\x35\x50\x83\xa4\x97\x51\x0a\x1b\xd8\x54\xb8\xd9\x40\x27\x85\x7d\xdb\xa4\xae\x50\xef\x3b\xec\x01\x47\x19\x19\xf0\xe9\x01\x70\x7f\xfc\xfe\xe3\xf9\x78\x78\x7a\xfe\xf9\xf8\x0d\xb0\x9b\xc5\xe5\x24\x45\x62\xd9\x0d\xaf\xce\xd8\x79\x50\x3a\xe3\x68\x1a\x9c\x42\xad\xd9\xc0\x87\x2b\x59\x7d\x4b\xc9\xca\x5e\x3f\x06\x18\x53\x29\x0b\x5c\xd5\xce\x30\xb0\x31\x90\x43\x0c\xfc\x1e\xe7\x05\x06\xc4\x41\x6a\x2a\x53\xe6\xdc\x6c\x80\xba\x60\x83\x18\xc4\x41\x2b\x7f\x82\xd3\x14\x6f\xe7\xd5\x84\x2a\xf0\x8d\x2e\x63\xe1\x6d\x93\xd6\xe8\x7b\x91\x96\x4a\x01\x6c\x7d\xa0\xac\x57\xc0\xf6\x6a\x12\x8c\x1e\x26\xb5\x77\xc0\x76\x54\xa9\xc1\x86\x64\x12\x03\x60\x9b\xc8\x03\xa9\x48\x5f\xd7\x57\xd2\x57\x5c\xd1\xc8\x18\xb0\xed\xd4\x2e\x14\xe8\x9c\x26\x93\x58\x00\xdb\x8b\xb8\x4b\xed\x31\x73\x2a\x64\x14\xa2\xd5\xdf\x37\x6f\x92\xd6\xb2\xbc\xc2\x34\xe9\x76\xbb\x4f\x54\xa9\x2c\xce\x76\xbc\x63\xe2\xcb\xe2\x37\x03\xfe\xba\x4f\x06\x7f\x77\x86\x3a\xc5\x38\xc5\x6e\x88\x4b\xf9\xbf\x20\x8b\xaf\x9f\x8e\x69\xe0\x74\x5e\x2f\xff\x44\x99\x29\x27\xcd\xbc\xdd\x33\xe5\x43\xa8\xb1\x37\x7f\x02\x00\x00\xff\xff\xd0\x33\x8c\xc7\x56\x02\x00\x00"

func rulesDefaultsNinjaBytes() ([]byte, error) {
	return bindataRead(
		_rulesDefaultsNinja,
		"rules/defaults.ninja",
	)
}

func rulesDefaultsNinja() (*asset, error) {
	bytes, err := rulesDefaultsNinjaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules/defaults.ninja", size: 598, mode: os.FileMode(420), modTime: time.Unix(1561629605, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rulesFlavorDevNinja = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xce\xb1\x0a\xc2\x40\x0c\x00\xd0\xbd\x5f\x11\xd0\x35\xa0\x4e\x2e\x4e\x7e\x82\x43\xe6\x78\x4d\xef\x02\xd7\x4b\x49\x22\xa5\x7f\x2f\xfd\x80\x07\xef\x02\x6f\xdb\x0e\xd7\xda\x12\x1e\xb7\xfb\x13\x3e\xa5\xe9\x37\x52\xe6\x69\x2a\x3b\xfb\x58\x3a\xd7\x78\x21\x71\xef\x80\x24\xee\xe6\x80\x14\x8d\x67\xdb\x01\x69\x77\x4d\xc1\x48\xd7\x51\x03\x90\x36\xd3\x91\xe2\xc8\xae\xd9\x00\xa9\x70\x24\x72\xd7\x3a\x4e\xa5\x75\x60\xb1\x75\x63\x17\x40\x5a\xcc\x57\x4e\x0c\x29\x3f\xd7\x3c\x00\x69\xd5\x08\x1d\x15\x67\x29\x9d\x9d\x53\x6d\x04\x5c\xcf\xc6\xa9\xb4\x8b\x4f\xff\x00\x00\x00\xff\xff\x55\x2b\x36\x57\xb1\x00\x00\x00"

func rulesFlavorDevNinjaBytes() ([]byte, error) {
	return bindataRead(
		_rulesFlavorDevNinja,
		"rules/flavor/dev.ninja",
	)
}

func rulesFlavorDevNinja() (*asset, error) {
	bytes, err := rulesFlavorDevNinjaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules/flavor/dev.ninja", size: 177, mode: os.FileMode(420), modTime: time.Unix(1560500408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rulesFlavorGcovNinja = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\x31\x6a\x34\x31\x0c\x46\xfb\x39\x85\x60\xff\x56\xf0\x27\x55\x9a\x2d\x42\x8e\x90\xc2\x65\xd0\xda\xb2\x47\xe0\xb5\x8c\xa4\xd9\x61\x6f\x1f\x9c\x5c\x20\xa5\xd0\x7b\x7c\xef\x02\x1f\x3a\x9f\x26\x6d\x0f\x78\xfd\xff\xf2\x06\x9f\x79\x97\x9b\x07\x97\x6d\xcb\x27\xd9\xa8\x9d\x9a\x5f\x31\x51\xef\x80\x89\xcd\xd4\x00\x93\xef\x54\xf4\x04\x4c\xa7\x49\x30\x7a\x98\x8c\xe6\x80\x69\xaa\x8c\x60\x43\x32\x89\x1d\x30\x65\xf2\x40\xea\xd2\xc6\xb2\xa4\x0d\xcc\x7a\x9f\x64\x0c\x98\xaa\xda\x9d\x02\x9d\xf3\x61\x12\x4f\xc0\x74\x17\x77\x19\x0d\x0b\xe7\x4e\x46\x21\x3a\x1c\xfe\xad\x8c\x65\x49\x67\xdb\x2e\xf0\x5e\x8a\xac\x0f\x75\xf8\x89\x83\xaa\x06\xb7\x43\x7a\x91\xd1\xe0\x5c\xbb\x2d\xeb\x03\xfc\x98\x53\x2d\xb6\x75\x7c\x65\x9d\xe1\x57\xac\xd3\xb4\x4a\x67\x24\xcb\x0e\x58\x83\x3d\x30\xeb\x83\x8d\x1a\xff\x92\xbd\xfc\x01\x05\xec\x0b\xde\xbe\x03\x00\x00\xff\xff\x04\x68\x59\x13\x3f\x01\x00\x00"

func rulesFlavorGcovNinjaBytes() ([]byte, error) {
	return bindataRead(
		_rulesFlavorGcovNinja,
		"rules/flavor/gcov.ninja",
	)
}

func rulesFlavorGcovNinja() (*asset, error) {
	bytes, err := rulesFlavorGcovNinjaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules/flavor/gcov.ninja", size: 319, mode: os.FileMode(420), modTime: time.Unix(1560500408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rulesFlavorReleaseNinja = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcc\xbd\x0a\xc2\x30\x10\x00\xe0\x3d\x4f\x71\xe0\x7c\xa0\x9d\x5c\x3a\x55\x71\xb3\x60\x29\x8e\x25\xbd\xfc\x1d\x86\x26\xe4\x0e\xa5\x6f\xef\xd2\x17\xf8\x4e\x30\x94\xba\x37\x8e\x49\xa1\x3b\x5f\xae\x30\x51\xe2\x55\xd4\x3b\x63\x28\x64\x1b\xa5\xc7\x08\x58\xb9\x7a\xc0\xb1\x03\xbc\x2d\x8f\xe7\xbc\x4c\xe3\xfc\x1a\xee\x80\xe1\xcb\xc2\x2b\x67\xd6\xbd\x4f\xec\x9c\xdf\x00\x83\xa8\xa5\x0f\xd6\x56\xd4\x93\x96\x66\xe8\x67\xdb\x76\x58\x6f\x9b\xb3\xf9\x07\x00\x00\xff\xff\x27\x5a\x34\x2a\x75\x00\x00\x00"

func rulesFlavorReleaseNinjaBytes() ([]byte, error) {
	return bindataRead(
		_rulesFlavorReleaseNinja,
		"rules/flavor/release.ninja",
	)
}

func rulesFlavorReleaseNinja() (*asset, error) {
	bytes, err := rulesFlavorReleaseNinjaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules/flavor/release.ninja", size: 117, mode: os.FileMode(420), modTime: time.Unix(1560500408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rulesRulesNinja = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x6f\x6f\xdb\x38\xd2\x7f\xef\x4f\x31\x70\x84\x34\x45\x97\xce\xa6\xd8\xee\xf3\xe0\x0a\x2d\x2e\x9b\xb6\xb9\x1c\xd2\xf8\xd0\xa4\x77\x6f\x0a\x08\x34\x45\x4b\xdc\x50\x24\x8f\xa4\x62\xfb\xb0\x1f\xfe\x30\x14\x65\xcb\xb2\x1c\xa7\xed\xde\x21\xf7\xc6\x96\xc8\xe1\x6f\xfe\x72\x38\x43\x1d\xc1\x85\x36\x2b\x2b\x8a\xd2\xc3\xeb\x1f\xcf\xfe\x1f\x6e\x59\x29\x66\xce\xf3\x7c\x34\xb2\xb5\xe4\xc0\x96\xcb\x11\x00\x00\xd3\x55\x45\x55\x0e\x29\x24\x6c\xb9\x84\xc4\x08\x36\x97\xb4\x80\x64\x2e\xe9\x83\xb6\x59\x78\x73\x90\xac\xff\x97\xcb\xf6\x69\x41\xad\x8a\xcf\x05\xd3\x0f\x19\xd3\xc6\xe3\x78\xf3\xe7\x6c\xf3\x40\xae\x26\x40\xae\x12\xa1\x58\x2e\x2c\xe0\xbf\xac\x73\xee\x20\xc9\xf9\x5c\x28\xee\x80\x7c\xfc\xf8\x0e\xc8\xc7\x0f\x90\xe8\xda\x4f\x72\x20\x1f\xef\xc2\x23\x10\x86\xe4\x40\x74\x78\x0d\xd2\xe6\xdc\xcc\x85\xe4\x28\x6d\x20\x8e\x83\x8e\x59\x61\xbc\xd0\x0a\x52\xb8\x78\xf5\x0a\x95\x32\x48\x16\xd6\x45\x7d\xd9\x8e\xba\xec\x09\xda\x6a\x25\x57\xcf\x5c\xdf\x41\x6d\x97\xcb\x8c\x2a\x2a\x57\x8e\xf7\xd4\xb6\x15\x10\x3b\x6f\x18\xbe\x85\xea\x1e\x85\x24\xa6\x7d\x67\x92\xaa\xe2\xd5\x2b\x48\xe2\x62\x9b\x45\x85\xff\xfb\x61\xb1\x6b\x8a\xbe\x97\xa3\x8c\xdb\x5e\xfe\x76\xb5\xbf\x41\xe9\xff\x40\x74\x1c\x50\xbb\xa7\x74\x7c\xcb\xbc\xd6\x12\x83\x64\x56\x0b\x99\xe3\x4b\x2e\xec\xa9\x50\x9e\x5b\x45\xe5\x29\x0e\xb8\x53\xa6\xcd\xaa\xb5\xce\xc4\xc8\x68\xb0\xce\x60\x7f\x83\x6c\x81\x07\x4b\x25\x42\x0d\x09\xa5\xcd\x6a\x2d\x97\xd7\x5d\x7f\xcc\x85\xa2\xf2\x49\xf8\x24\x90\x3e\xc6\xe6\x43\x20\x68\xf9\x08\x15\xf9\x48\xa1\xee\xb3\x85\xa5\xc6\x70\x0b\x29\x38\x3e\x03\x12\x10\x71\xa2\x91\x02\x9f\x76\xd3\xdd\xd6\xc2\x26\xf9\xc9\x3c\x7a\x50\xe6\x8d\xdb\x82\x27\xe3\x0b\xb9\xc6\x35\xb3\x10\x39\xd7\x90\x38\x56\x31\xad\x6d\x9e\x31\xad\xbc\x15\xb3\x53\x29\x66\xad\xe7\xe0\xcf\x61\xbb\x5a\x67\x10\x4a\x8a\x99\x1b\xd0\x07\xf9\x6f\xfc\x6c\xdd\xd6\x4e\xb7\xce\x74\x87\x03\x13\xae\x3c\x4e\x0b\x35\xda\xa8\x75\x40\x29\xf6\xbf\xa6\x93\xa1\xd6\x0b\x2a\x0f\xaa\x26\x73\x20\x76\x57\xb4\x01\x91\x5a\xc4\x55\x10\x4e\xe0\x3e\xff\x0e\xf9\xa8\xed\x89\x45\x2d\x30\xfb\x58\xd8\x52\x0b\x52\xcc\x2c\xb5\xab\xad\x8d\x21\xf9\x4e\x44\xe2\x18\x90\x57\x40\xf4\x23\x70\x48\xd3\xc1\x59\x51\xb6\x7b\x92\xcf\x84\xd3\x0a\xc8\x0a\x48\x0e\x84\xe4\x7c\x56\x17\x6b\x53\x0d\xa3\x22\x4c\x17\x56\x28\xe7\xa9\x94\x68\x82\x79\x0f\x3c\x4e\x01\xa9\x7e\xfc\xf9\xa7\x9f\x42\xbe\xda\x93\xac\x30\xb7\x84\xf9\xed\x9c\xd0\x62\x37\xa4\xfb\xd1\xff\xef\xcd\x9b\xef\x40\x2f\x39\xcd\x79\xdf\x59\x9b\xe4\xd0\x4c\x93\x96\xdd\x21\x3e\x0d\xf9\x1e\x56\x66\xb5\x97\x8d\x59\xf9\x52\xab\xa7\xb0\x69\x28\x0f\x69\x65\x4a\xd3\xe3\x65\x4a\x03\xa4\x41\xfe\x05\x4e\x73\xfe\x70\xaa\x6a\x29\xe1\xf8\xf8\x2b\x1c\x85\x18\x6e\xa5\x3c\x5d\x02\x2b\x39\xbb\x07\x84\xde\x23\x49\x38\x30\x0a\xbd\x57\xe3\x42\x3f\x45\xdb\x42\xc3\xbc\xf2\x4f\xe1\xa6\x18\xed\xc7\x08\xa3\x3e\xea\xbb\xd7\x65\xb8\x8a\x2b\xea\xf9\x00\xa6\xd7\x35\x2b\x7b\x90\x61\x2c\x12\x15\x86\xdb\x79\xc6\x55\x5d\x1d\x3a\x51\x37\x94\xeb\xf3\x74\x33\xd4\x4f\x5f\x1d\xd8\x47\x36\x62\x8f\x6a\xd4\x45\x75\x0b\xe1\x77\x24\xef\xe2\x12\xf7\x8d\xd0\x3d\xcc\x30\x86\x07\xc2\xf9\xcd\xed\x15\xb9\x00\x42\x74\xed\x4d\xed\x09\xa6\xc5\xf4\x10\x8b\x2e\x7a\xb0\x5e\xf6\xc0\xad\x13\x5a\xf5\xb8\x70\x56\x6a\xf8\x72\xd4\x14\x3e\xf0\xeb\xe7\xab\xeb\x77\xd9\xdf\xdf\x7f\xba\xbd\x9a\xde\xc0\x97\x71\x63\xf8\xb8\xf2\xcb\xb8\x75\x76\x14\x9a\x2b\x6e\xa9\xe7\x99\x12\xea\x37\xea\x7a\xc0\x0d\x54\xf3\xfb\xe1\xd3\xf4\x63\x76\x73\x75\xf3\xd7\xf3\xf4\x0c\x2e\x2e\xd2\x71\xc2\xd8\xb8\xa1\xb8\x9b\x4e\xaf\xdf\x5d\x7d\x4a\xc7\x5b\x3e\x1e\x47\x97\x67\xe1\x37\x20\x47\x6e\xda\xa6\xa3\xd1\x11\xdc\x0a\xc5\x38\x06\x70\x20\x00\x5b\x2b\x07\x0b\xe1\x4b\x60\xb5\xf3\xba\x02\x73\x5f\xe4\xc2\xba\xf5\xf6\xcb\xb9\xe1\x2a\xe7\x8a\xad\xc0\x50\x76\x4f\x0b\xee\x46\x47\xe0\x4b\xbe\x02\x46\xd5\x0b\x0f\x33\x8e\x20\x58\xd0\x18\x6a\xa9\x94\x5c\xfe\x00\x58\x58\x02\x95\x52\x2f\x40\x2b\x0e\xd4\x03\x05\x2f\x2a\x0e\x73\x6d\x71\xad\xe3\x50\xe9\x9c\xbb\xc9\xc8\x34\x9b\x2e\x08\xe3\x32\x29\x66\x6d\xdf\xe0\x4b\x48\xe1\xac\x37\x6f\x04\xdb\x25\x19\x1d\xc1\x5d\xc9\x5b\x22\x08\xdb\xb8\x76\xdc\x81\xd3\x15\x07\xae\x1e\x84\xd5\xaa\xc2\x93\xf0\x81\x5a\x41\x67\x92\xbb\x09\xfc\x83\x47\xf9\x1a\x69\xbc\x46\x3d\x1c\xf7\xa3\x23\xd4\x04\xcf\x0d\x51\x3c\x50\xeb\x20\xb8\x08\x30\x72\xdc\x04\xf9\xac\x60\x21\x82\x59\xe6\xb4\x96\x1e\x17\xfa\x92\x83\xd2\xb6\xa2\xb2\xcb\x6c\x74\xb4\x61\x07\x62\x0e\x4a\x7b\xc4\x47\x6a\xcb\xa1\xd4\x0b\xfe\xc0\xed\x04\xe0\xae\x14\x0e\x84\x0b\x96\x59\xdb\x5a\x70\x87\xc8\x0b\x6d\xef\xa1\xd2\x96\x8f\x8e\xc0\x58\x6d\xb8\x45\xb3\xba\xae\x78\x4d\xf8\x02\x2b\xa9\x2a\xb8\x03\xcb\xbd\x15\x45\xc1\x6d\xe3\x5e\x07\xb3\xda\xef\x95\x2a\xd7\x28\xd5\x64\x14\x2d\x17\x0a\xd9\xf4\x72\xfa\xb7\xf3\xbb\xbf\xa4\xe3\xa4\xd0\x86\xfa\x72\x0c\x97\xd3\x18\x8a\xd7\xe7\x97\xb7\x69\xd2\x12\x37\x55\x59\x3b\x79\xf7\xfe\xf6\xae\x4f\xe1\xb9\xf3\x91\xec\xe2\x72\x9a\xbd\xbf\x39\xff\xf5\xfa\xfd\xbb\x34\x61\x85\xce\xb8\x42\x11\xf2\xad\xc4\xdb\x44\x6c\xdc\x21\x7a\x13\xbf\x9b\x9d\x71\x39\x9d\xde\x06\xc9\xb4\x43\xb9\xce\x3f\x5d\x34\x82\x52\xcb\xca\x31\x24\x5d\x3d\x80\x98\xfb\xa2\xd1\xe2\xbe\x18\x03\x69\x7a\x9e\x74\x4c\xae\x60\xa0\x7b\x31\x92\xfa\xb9\xb6\x55\xd6\x0e\x8d\x81\xc4\xc2\x33\x1d\x3f\xa5\xc8\x8c\x25\xe5\x18\x08\xc6\x35\xda\x00\xff\x83\x10\xb9\xb0\xed\x1e\x0d\xfb\x73\x9c\x08\x85\xbf\xba\xf6\xe1\x6f\xf6\x1b\xa6\xe6\xd8\x29\x93\xb8\x72\xbc\xd3\x3e\x0f\x92\x0d\xe4\xb0\xc0\x08\xcb\xc4\x42\x43\x2b\x46\x48\x79\x73\xab\xab\x4e\x25\x18\x8d\xd5\x6e\xa7\x3f\xd4\xc8\xeb\xce\xf3\xd9\x59\x3b\xda\x6f\xc7\xbc\xf1\xf1\x80\x3d\xbb\x85\xf0\xc6\x9e\xb8\xc6\x34\x0d\xec\x3a\x51\xb5\xfe\x69\x6d\x8d\x7b\x61\xe7\xe4\x7b\x36\xe1\x8a\xd2\xed\xb7\xde\x80\x51\x70\x41\xb4\x49\x3c\x14\x42\x43\xdb\x0d\x2e\xae\x06\xce\xfa\xaf\xd4\xf8\x8f\xd6\x33\x08\xf5\x68\x98\x04\x8a\xc0\x60\x48\xed\x30\xfb\xb8\xde\x4c\x3f\xec\x94\xed\xcf\xc8\xd3\x41\xbc\x6f\x48\x4b\x61\xdd\xa1\xa4\xb4\xd1\x7d\x38\x5a\xc2\x3c\xda\x4c\xcf\x0f\x59\x30\x2b\x7d\x25\x9f\xb9\x19\x83\x8c\x07\x6d\x39\x58\xdf\x47\x3b\x78\x0d\x01\xe3\x51\x7b\xd0\x3c\xaf\xa8\xe8\x57\x9f\x9b\xee\x08\x9b\xa3\x03\x0c\x1d\xf7\xb5\x41\x16\x08\xb4\xe6\xd3\x29\x48\xdd\xaa\x5a\x5f\x59\x1c\xc1\x0d\xe7\x58\x46\x81\x8d\xa5\xfe\x5c\x58\xe7\x7f\x00\x8d\xa5\xcb\x42\x60\xed\x16\xee\xe5\xbd\x5d\x21\x15\xb3\x3c\x34\x2a\xba\xf6\xa7\xc9\xc9\x8c\x3a\xae\x68\xd5\xbc\xbf\x8c\x80\x97\x37\x9f\xa1\xa4\x0e\xc8\x1d\x84\x63\x01\x8b\x12\x1f\xeb\x1e\x2c\x6f\xc2\x15\x30\xf5\x62\x26\xf9\x64\xe0\xe2\x33\xde\x7b\x1e\x1f\x83\x54\x40\xdc\x1c\x12\x4f\x6d\xc1\xfd\xbe\xfe\x29\x6a\xb3\xbe\x2b\x89\x57\x33\x56\x7b\xbd\x73\x8d\xde\x8c\x02\x21\xe1\x21\xc3\x92\x27\x4d\x92\x93\x5c\xd8\x46\x0b\xa1\x5e\x02\x21\xcc\x98\x4c\xd7\x7e\x6b\x06\xf5\xeb\xde\xfc\x04\x20\x32\x8c\x4f\x0e\x73\x38\x84\x9f\xeb\x85\x92\x9a\xf6\x4b\xa2\x13\x60\xb5\x95\xd8\x3a\x91\xeb\xcd\x25\x49\x72\x82\x1d\x3f\x90\xb3\x06\xfe\xf8\x38\xec\x41\x18\x27\xc9\x89\x2b\xe9\xeb\x37\x3f\xbb\xd8\x45\xbd\x1c\x43\x1a\x86\x3d\x15\x72\x4d\x0f\x4d\x16\x78\x09\xbf\xff\x0e\x27\x5d\x17\xbc\x05\xbe\x14\x1e\xce\xe0\xe5\x80\xd9\xdf\x45\x09\xd1\xee\x28\x53\xaf\xe0\xa8\xd5\xbf\x44\xbf\xfb\x0f\x63\xe1\x22\x1b\x83\x3e\xa4\x95\xa6\x51\xfa\x0a\xce\x29\x7c\x0e\x28\xcd\xf2\x1e\xd3\x59\xe0\xf0\xfa\xd1\xdb\xf4\x48\x03\x84\xdc\x73\x6e\x80\x90\x7f\xd6\x82\x7b\x20\xc4\xf9\x3c\xf6\x8a\x6d\xfb\xd6\x14\xe8\x19\x42\x67\x71\x59\xba\xbe\xb4\x58\xeb\xe9\x77\x6e\xd9\x3c\xb5\x40\x96\x40\xa6\x41\x9f\xef\xd3\x15\xb1\x06\x75\xb5\x5a\xf5\xb3\xc4\xa6\xbc\xc6\xc9\xc7\x6e\x34\x2e\x63\x4b\x0a\x15\xc5\x0c\x51\x70\xa8\x1d\x3a\x32\x80\xc6\x0e\x6b\xae\xb1\x63\x0a\xa3\x75\xe8\x1f\x82\x35\x40\xab\x4e\x4f\xe1\x4b\x6c\xf6\x2c\x87\xa6\x2f\xce\x41\x28\x6c\x17\xb5\x96\x61\xcd\x24\xb4\x53\xa1\x91\x02\xcb\xa9\xd3\x2a\xb6\x84\x4d\x32\x08\xab\x43\x6f\x29\x14\xf8\xda\xe2\xda\x0d\x17\xdc\x3a\x6e\x0d\x3c\x5b\x81\xe1\x96\x34\xdf\x36\xb6\xda\xb4\xd1\x48\xa8\xa7\x7c\x51\x10\x6a\x7d\xef\xb1\x93\x5f\x93\x08\x81\x99\x15\xdb\xad\xf1\xb6\xf1\x2c\x77\x9e\xfa\xf4\x6c\x7d\xbf\xd5\xb4\x64\x43\x57\x04\x2f\x70\xd1\x9f\xc2\xf2\x17\xbf\x34\x9f\xc1\xde\xb6\x87\x68\x1a\xbf\xa1\x75\xa5\x4c\xb7\x64\x86\xa4\xc5\xee\xc4\xe1\x3a\x62\x86\xc3\xa5\xf7\xcd\xed\xdf\x01\x00\x00\xff\xff\x4b\xb5\xc5\x65\x4c\x1d\x00\x00"

func rulesRulesNinjaBytes() ([]byte, error) {
	return bindataRead(
		_rulesRulesNinja,
		"rules/rules.ninja",
	)
}

func rulesRulesNinja() (*asset, error) {
	bytes, err := rulesRulesNinjaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules/rules.ninja", size: 7500, mode: os.FileMode(420), modTime: time.Unix(1568381908, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rulesStaticNinja = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x31\x8f\xd4\x40\x0c\x85\xfb\xfc\x8a\x27\x65\x0b\x90\x4e\x59\xa0\x42\x48\x54\x57\x20\x3a\xa4\xa3\x5f\x79\x67\x9c\x8c\xb9\x59\x4f\xe4\x99\x64\xb5\x12\x3f\x1e\xcd\x24\x0b\x1c\x05\xba\x2a\xb1\xf3\xf9\xf9\xf9\xa5\xc7\x63\x9a\x6f\x26\x53\x28\xf8\xf0\xee\xfd\x47\x3c\xb9\x20\xe7\x5c\xd8\x77\x5d\x8f\xa7\x42\x45\x1c\x6c\x89\x9c\x31\x26\x83\x63\x2b\x24\x8a\x42\x36\x71\xc9\x03\xbe\x07\xc9\x18\x25\x32\x24\x43\xd4\xc5\xc5\xb3\x47\x52\xc7\x98\xd9\x30\x46\x5a\x93\x3d\x74\x3d\x16\x8d\xf2\xcc\x9b\xd4\xa0\xa2\x3f\xe8\x01\xd7\x20\x2e\xd4\x41\xc2\x14\xd3\x99\xe2\x5d\x61\xa8\xcb\x1f\x8d\xa9\x30\x08\xe7\x45\xa2\xc7\xca\x96\x25\xe9\x1d\xd9\x96\x92\x7a\x10\x02\xa9\xbf\xc1\xf3\xcc\x9e\xd5\xdd\x20\x63\x33\x5b\x82\xe8\x94\xbb\x1e\x25\x50\x81\x32\x7b\x94\x04\xe3\x4d\x4f\x46\x94\xc0\xff\x88\xbb\x40\x3a\x71\x1e\xba\xad\x7d\x10\x75\x5e\xec\xd8\xaa\xd3\x0e\x9d\x0e\xad\xdc\xab\x21\x7c\xc2\x8b\xcf\xff\x1b\xad\xb0\x68\x2e\x14\xe3\xc9\x25\x1d\x5f\xb7\xa0\x86\xf1\x85\x95\xad\xc6\x51\x3d\xaf\x64\x42\xe7\xdf\xff\x24\x5d\x66\x89\xa2\x13\x06\xd1\x16\x4b\x1e\xba\x1e\x47\xcf\xeb\x51\x97\x18\x5b\x30\xba\x27\x93\x31\x9b\x5c\xc8\x24\xde\x5e\x84\xa1\x43\xf3\x23\x0a\xe5\x2b\x7c\x72\xcf\x6c\x90\x0b\x4d\x9c\xf1\xe6\x2a\x25\xb4\xfe\xd7\x6f\xf9\xed\xd0\x89\x36\xf6\x33\x36\x9f\x25\xa5\x98\x8f\xbb\xc2\x5f\xd7\x27\x1d\xeb\xb5\xf5\x29\xd3\xce\xae\x64\x19\x87\xad\xd5\xde\x7f\xde\xd1\x8a\x88\x56\xad\x3f\xce\xbb\x5f\x01\x00\x00\xff\xff\x8f\x67\x6c\x0c\x9e\x02\x00\x00"

func rulesStaticNinjaBytes() ([]byte, error) {
	return bindataRead(
		_rulesStaticNinja,
		"rules/static.ninja",
	)
}

func rulesStaticNinja() (*asset, error) {
	bytes, err := rulesStaticNinjaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules/static.ninja", size: 670, mode: os.FileMode(420), modTime: time.Unix(1560500408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"internal/assets/main.go": internalAssetsMainGo,
	"internal/tools/copy_analyse.pl": internalToolsCopy_analysePl,
	"internal/tools/gperf_enum.pl": internalToolsGperf_enumPl,
	"internal/tools/in.pl": internalToolsInPl,
	"rules/compiler/clang.ninja": rulesCompilerClangNinja,
	"rules/compiler/gcc.ninja": rulesCompilerGccNinja,
	"rules/compiler-flavor/.gitkeep": rulesCompilerFlavorGitkeep,
	"rules/defaults.ninja": rulesDefaultsNinja,
	"rules/flavor/dev.ninja": rulesFlavorDevNinja,
	"rules/flavor/gcov.ninja": rulesFlavorGcovNinja,
	"rules/flavor/release.ninja": rulesFlavorReleaseNinja,
	"rules/rules.ninja": rulesRulesNinja,
	"rules/static.ninja": rulesStaticNinja,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"internal": &bintree{nil, map[string]*bintree{
		"assets": &bintree{nil, map[string]*bintree{
			"main.go": &bintree{internalAssetsMainGo, map[string]*bintree{}},
		}},
		"tools": &bintree{nil, map[string]*bintree{
			"copy_analyse.pl": &bintree{internalToolsCopy_analysePl, map[string]*bintree{}},
			"gperf_enum.pl": &bintree{internalToolsGperf_enumPl, map[string]*bintree{}},
			"in.pl": &bintree{internalToolsInPl, map[string]*bintree{}},
		}},
	}},
	"rules": &bintree{nil, map[string]*bintree{
		"compiler": &bintree{nil, map[string]*bintree{
			"clang.ninja": &bintree{rulesCompilerClangNinja, map[string]*bintree{}},
			"gcc.ninja": &bintree{rulesCompilerGccNinja, map[string]*bintree{}},
		}},
		"compiler-flavor": &bintree{nil, map[string]*bintree{
			".gitkeep": &bintree{rulesCompilerFlavorGitkeep, map[string]*bintree{}},
		}},
		"defaults.ninja": &bintree{rulesDefaultsNinja, map[string]*bintree{}},
		"flavor": &bintree{nil, map[string]*bintree{
			"dev.ninja": &bintree{rulesFlavorDevNinja, map[string]*bintree{}},
			"gcov.ninja": &bintree{rulesFlavorGcovNinja, map[string]*bintree{}},
			"release.ninja": &bintree{rulesFlavorReleaseNinja, map[string]*bintree{}},
		}},
		"rules.ninja": &bintree{rulesRulesNinja, map[string]*bintree{}},
		"static.ninja": &bintree{rulesStaticNinja, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

