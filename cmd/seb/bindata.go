// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../internal/assets/main.go
// ../../rules/compiler/clang.ninja
// ../../rules/compiler/gcc.ninja
// ../../rules/compiler-flavor/.gitkeep
// ../../rules/defaults.ninja
// ../../rules/flavor/dev.ninja
// ../../rules/flavor/gcov.ninja
// ../../rules/flavor/release.ninja
// ../../rules/rules.ninja
// ../../rules/static.ninja
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _internalAssetsMainGo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd2\xd7\x57\x70\xce\x2f\xa8\x2c\xca\x4c\xcf\x28\x51\x30\x32\x30\xb4\x50\x08\x4e\xce\xc8\x4c\x2a\x2e\x49\x4d\xe1\xe2\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\x4a\x2b\xcd\x4b\x06\x33\x35\x34\x15\xaa\x6b\xb9\x00\x01\x00\x00\xff\xff\xf5\xc9\x7a\xc9\x3a\x00\x00\x00"

func internalAssetsMainGoBytes() ([]byte, error) {
	return bindataRead(
		_internalAssetsMainGo,
		"internal/assets/main.go",
	)
}

func internalAssetsMainGo() (*asset, error) {
	bytes, err := internalAssetsMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/assets/main.go", size: 58, mode: os.FileMode(420), modTime: time.Unix(1560500408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rulesCompilerClangNinja = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xcd\x31\xae\xc2\x30\x10\x84\xe1\xde\xa7\x18\x29\xb5\x9f\x1e\x54\x34\x34\x70\x04\x90\x28\xa3\x8d\xbd\xc4\x2b\x99\x75\xf0\x3a\x44\xb9\x3d\x0a\x69\x7f\xcd\xe8\xeb\x70\x2d\xd3\x5a\x65\x4c\x0d\xc7\xff\xc3\x09\xb7\x90\x64\xb0\xc6\xd1\xb9\x85\xaa\x86\xf2\x9a\x24\x73\x3d\xfb\x87\x16\x3f\x51\x65\x6d\x89\x8d\xcd\xf3\x7b\xa6\x2c\x6d\x75\xae\xc3\x3d\x89\xe1\x43\x55\x68\xc8\x8c\x40\x8a\x81\x31\x1b\x47\x88\xe2\x32\x4b\x8e\x91\x2d\x18\x5a\x41\x14\xfb\x8d\xda\x76\xd9\x04\xd1\xf1\xcf\x2d\xbd\x96\xde\x38\x3f\x7b\x32\x93\x51\x77\x6e\x0b\x7e\x0f\xee\x1b\x00\x00\xff\xff\xc8\x01\xa3\xc6\xa9\x00\x00\x00"

func rulesCompilerClangNinjaBytes() ([]byte, error) {
	return bindataRead(
		_rulesCompilerClangNinja,
		"rules/compiler/clang.ninja",
	)
}

func rulesCompilerClangNinja() (*asset, error) {
	bytes, err := rulesCompilerClangNinjaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules/compiler/clang.ninja", size: 169, mode: os.FileMode(420), modTime: time.Unix(1560500408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rulesCompilerGccNinja = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcb\x31\x0e\xc2\x30\x0c\x05\xd0\x3d\xa7\xf8\x52\xe7\x22\x60\x62\x61\xe2\x08\x0c\xcc\xc5\x0d\x69\x24\x93\x6f\xd9\x46\xa8\xb7\x67\xe5\x00\x6f\xc2\x8d\xb6\x7b\x6f\x5b\xe2\x7c\x3c\x5d\x70\x97\xad\x3f\x23\xeb\x5a\xca\x04\xd1\x65\x34\xac\xac\x81\xc1\x44\x7c\xcc\xe8\x89\xf9\xa1\x6c\x5d\x16\x9d\x69\x08\x82\x43\x77\x44\x4d\xf4\xc4\x8b\x8e\x26\x72\x28\xdf\xc5\x87\xf0\x6d\x5d\xab\x5f\xff\x45\xf9\x05\x00\x00\xff\xff\xab\xaa\x4a\x08\x74\x00\x00\x00"

func rulesCompilerGccNinjaBytes() ([]byte, error) {
	return bindataRead(
		_rulesCompilerGccNinja,
		"rules/compiler/gcc.ninja",
	)
}

func rulesCompilerGccNinja() (*asset, error) {
	bytes, err := rulesCompilerGccNinjaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules/compiler/gcc.ninja", size: 116, mode: os.FileMode(420), modTime: time.Unix(1560500408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rulesCompilerFlavorGitkeep = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00"

func rulesCompilerFlavorGitkeepBytes() ([]byte, error) {
	return bindataRead(
		_rulesCompilerFlavorGitkeep,
		"rules/compiler-flavor/.gitkeep",
	)
}

func rulesCompilerFlavorGitkeep() (*asset, error) {
	bytes, err := rulesCompilerFlavorGitkeepBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules/compiler-flavor/.gitkeep", size: 0, mode: os.FileMode(420), modTime: time.Unix(1560500408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rulesDefaultsNinja = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x41\x8b\xdb\x40\x0c\x85\xef\xfe\x15\x82\x14\x7a\xa9\x42\xbb\xa7\x5e\x72\xda\x94\xde\xba\xd0\xb0\xb8\xb7\xa0\xcc\xc8\xb6\xc8\x64\x64\x24\xd9\x89\xfb\xeb\x8b\x77\xd3\x2d\x0b\xbd\x09\xe9\xcd\x7b\xdf\x63\x36\xf0\xa8\xe3\x62\xd2\x0f\x01\x0f\x9f\xbf\x7c\x85\x43\x1a\xe4\xe4\xc1\xb9\x69\x36\xb0\xe7\x8e\xa6\x12\x30\x53\x99\xd8\xa1\x53\x83\x99\x4c\xe8\x54\xd8\x41\xbb\xe0\x0a\x3a\xb3\x99\xe4\xcc\x15\x4e\x0b\x74\x85\x66\x35\x50\x83\xa4\x97\x51\x0a\x1b\xd8\x54\xb8\xd9\x40\x27\x85\x7d\xdb\xa4\xae\x50\xef\x3b\xec\x01\x47\x19\x19\xf0\xe9\x01\x70\x7f\xfc\xfe\xe3\xf9\x78\x78\x7a\xfe\xf9\xf8\x0d\xb0\x9b\xc5\xe5\x24\x45\x62\xd9\x0d\xaf\xce\xd8\x79\x50\x3a\xe3\x68\x1a\x9c\x42\xad\xd9\xc0\x87\x2b\x59\x7d\x4b\xc9\xca\x5e\x3f\x06\x18\x53\x29\x0b\x5c\xd5\xce\x30\xb0\x31\x90\x43\x0c\xfc\x1e\xe7\x05\x06\xc4\x41\x6a\x2a\x53\xe6\xdc\x6c\x80\xba\x60\x83\x18\xc4\x41\x2b\x7f\x82\xd3\x14\x6f\xe7\xd5\x84\x2a\xf0\x8d\x2e\x63\xe1\x6d\x93\xd6\xe8\x7b\x91\x96\x4a\x01\x6c\x7d\xa0\xac\x57\xc0\xf6\x6a\x12\x8c\x1e\x26\xb5\x77\xc0\x76\x54\xa9\xc1\x86\x64\x12\x03\x60\x9b\xc8\x03\xa9\x48\x5f\xd7\x57\xd2\x57\x5c\xd1\xc8\x18\xb0\xed\xd4\x2e\x14\xe8\x9c\x26\x93\x58\x00\xdb\x8b\xb8\x4b\xed\x31\x73\x2a\x64\x14\xa2\xd5\xdf\x37\x6f\x92\xd6\xb2\xbc\xc2\x34\xe9\x76\xbb\x4f\x54\xa9\x2c\xce\x76\xbc\x63\xe2\xcb\xe2\x37\x03\xfe\xba\x4f\x06\x7f\x77\x86\x3a\xc5\x38\xc5\x6e\x88\x4b\xf9\xbf\x20\x8b\xaf\x9f\x8e\x69\xe0\x74\x5e\x2f\xff\x44\x99\x29\x27\xcd\xbc\xdd\x33\xe5\x43\xa8\xb1\x37\x7f\x02\x00\x00\xff\xff\xd0\x33\x8c\xc7\x56\x02\x00\x00"

func rulesDefaultsNinjaBytes() ([]byte, error) {
	return bindataRead(
		_rulesDefaultsNinja,
		"rules/defaults.ninja",
	)
}

func rulesDefaultsNinja() (*asset, error) {
	bytes, err := rulesDefaultsNinjaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules/defaults.ninja", size: 598, mode: os.FileMode(420), modTime: time.Unix(1561629605, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rulesFlavorDevNinja = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xce\xb1\x0a\xc2\x40\x0c\x00\xd0\xbd\x5f\x11\xd0\x35\xa0\x4e\x2e\x4e\x7e\x82\x43\xe6\x78\x4d\xef\x02\xd7\x4b\x49\x22\xa5\x7f\x2f\xfd\x80\x07\xef\x02\x6f\xdb\x0e\xd7\xda\x12\x1e\xb7\xfb\x13\x3e\xa5\xe9\x37\x52\xe6\x69\x2a\x3b\xfb\x58\x3a\xd7\x78\x21\x71\xef\x80\x24\xee\xe6\x80\x14\x8d\x67\xdb\x01\x69\x77\x4d\xc1\x48\xd7\x51\x03\x90\x36\xd3\x91\xe2\xc8\xae\xd9\x00\xa9\x70\x24\x72\xd7\x3a\x4e\xa5\x75\x60\xb1\x75\x63\x17\x40\x5a\xcc\x57\x4e\x0c\x29\x3f\xd7\x3c\x00\x69\xd5\x08\x1d\x15\x67\x29\x9d\x9d\x53\x6d\x04\x5c\xcf\xc6\xa9\xb4\x8b\x4f\xff\x00\x00\x00\xff\xff\x55\x2b\x36\x57\xb1\x00\x00\x00"

func rulesFlavorDevNinjaBytes() ([]byte, error) {
	return bindataRead(
		_rulesFlavorDevNinja,
		"rules/flavor/dev.ninja",
	)
}

func rulesFlavorDevNinja() (*asset, error) {
	bytes, err := rulesFlavorDevNinjaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules/flavor/dev.ninja", size: 177, mode: os.FileMode(420), modTime: time.Unix(1560500408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rulesFlavorGcovNinja = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\x31\x6a\x34\x31\x0c\x46\xfb\x39\x85\x60\xff\x56\xf0\x27\x55\x9a\x2d\x42\x8e\x90\xc2\x65\xd0\xda\xb2\x47\xe0\xb5\x8c\xa4\xd9\x61\x6f\x1f\x9c\x5c\x20\xa5\xd0\x7b\x7c\xef\x02\x1f\x3a\x9f\x26\x6d\x0f\x78\xfd\xff\xf2\x06\x9f\x79\x97\x9b\x07\x97\x6d\xcb\x27\xd9\xa8\x9d\x9a\x5f\x31\x51\xef\x80\x89\xcd\xd4\x00\x93\xef\x54\xf4\x04\x4c\xa7\x49\x30\x7a\x98\x8c\xe6\x80\x69\xaa\x8c\x60\x43\x32\x89\x1d\x30\x65\xf2\x40\xea\xd2\xc6\xb2\xa4\x0d\xcc\x7a\x9f\x64\x0c\x98\xaa\xda\x9d\x02\x9d\xf3\x61\x12\x4f\xc0\x74\x17\x77\x19\x0d\x0b\xe7\x4e\x46\x21\x3a\x1c\xfe\xad\x8c\x65\x49\x67\xdb\x2e\xf0\x5e\x8a\xac\x0f\x75\xf8\x89\x83\xaa\x06\xb7\x43\x7a\x91\xd1\xe0\x5c\xbb\x2d\xeb\x03\xfc\x98\x53\x2d\xb6\x75\x7c\x65\x9d\xe1\x57\xac\xd3\xb4\x4a\x67\x24\xcb\x0e\x58\x83\x3d\x30\xeb\x83\x8d\x1a\xff\x92\xbd\xfc\x01\x05\xec\x0b\xde\xbe\x03\x00\x00\xff\xff\x04\x68\x59\x13\x3f\x01\x00\x00"

func rulesFlavorGcovNinjaBytes() ([]byte, error) {
	return bindataRead(
		_rulesFlavorGcovNinja,
		"rules/flavor/gcov.ninja",
	)
}

func rulesFlavorGcovNinja() (*asset, error) {
	bytes, err := rulesFlavorGcovNinjaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules/flavor/gcov.ninja", size: 319, mode: os.FileMode(420), modTime: time.Unix(1560500408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rulesFlavorReleaseNinja = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcc\xbd\x0a\xc2\x30\x10\x00\xe0\x3d\x4f\x71\xe0\x7c\xa0\x9d\x5c\x3a\x55\x71\xb3\x60\x29\x8e\x25\xbd\xfc\x1d\x86\x26\xe4\x0e\xa5\x6f\xef\xd2\x17\xf8\x4e\x30\x94\xba\x37\x8e\x49\xa1\x3b\x5f\xae\x30\x51\xe2\x55\xd4\x3b\x63\x28\x64\x1b\xa5\xc7\x08\x58\xb9\x7a\xc0\xb1\x03\xbc\x2d\x8f\xe7\xbc\x4c\xe3\xfc\x1a\xee\x80\xe1\xcb\xc2\x2b\x67\xd6\xbd\x4f\xec\x9c\xdf\x00\x83\xa8\xa5\x0f\xd6\x56\xd4\x93\x96\x66\xe8\x67\xdb\x76\x58\x6f\x9b\xb3\xf9\x07\x00\x00\xff\xff\x27\x5a\x34\x2a\x75\x00\x00\x00"

func rulesFlavorReleaseNinjaBytes() ([]byte, error) {
	return bindataRead(
		_rulesFlavorReleaseNinja,
		"rules/flavor/release.ninja",
	)
}

func rulesFlavorReleaseNinja() (*asset, error) {
	bytes, err := rulesFlavorReleaseNinjaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules/flavor/release.ninja", size: 117, mode: os.FileMode(420), modTime: time.Unix(1560500408, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rulesRulesNinja = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x5f\x6f\xe3\xb8\x11\x7f\xf7\xa7\x18\x38\x42\x2e\x41\x8e\xc9\x65\x71\x7b\x2d\xba\xd0\xa1\xb9\x64\x37\x4d\x91\xc4\xc5\x26\xdb\xbe\x2c\x20\xd0\x14\x2d\xf1\x42\x91\x2a\x49\xc5\xf6\xe1\x3e\x7c\x31\x24\xe5\x3f\xb2\x6c\x67\x77\xaf\x45\xfa\x62\x49\xe4\xcc\xfc\x66\x86\xc3\xe1\x0c\x7d\x00\x97\xba\x9e\x1b\x51\x94\x0e\xde\xfc\x70\xfe\x67\x78\x60\xa5\x18\x5b\xc7\xf3\xc1\xc0\x34\x92\x03\x9b\xcd\x06\x00\x00\x4c\x57\x15\x55\x39\xa4\x90\xb0\xd9\x0c\x92\x5a\xb0\x89\xa4\x05\x24\x13\x49\x9f\xb5\xc9\xfc\x97\x85\x64\xf1\x9c\xcd\xda\xb7\x29\x35\x2a\xbe\x17\x4c\x3f\x67\x4c\xd7\x0e\xc7\xc3\xc3\x9a\xf0\x42\x6e\x4e\x81\xdc\x24\x42\xb1\x5c\x18\xc0\xa7\x6c\x72\x6e\x21\xc9\xf9\x44\x28\x6e\x81\xdc\xdd\x5d\x01\xb9\xfb\x00\x89\x6e\xdc\x69\x0e\xe4\xee\xd1\xbf\x02\x61\x48\x0e\x44\xfb\x4f\xaf\x6d\xce\xeb\x89\x90\x1c\xb5\xf5\xc4\x71\xd0\x32\x23\x6a\x27\xb4\x82\x14\x2e\x4f\x4e\xd0\xa8\x1a\xc9\x3c\x5f\xb4\x97\x6d\x98\xcb\x5e\x60\xad\x56\x72\xfe\xca\xed\xed\xb5\x76\x36\xcb\xa8\xa2\x72\x6e\x79\xc7\x6c\x53\x01\x31\x93\x00\xf8\x0e\xaa\x27\x54\x92\xd4\xed\x37\x93\x54\x15\x27\x27\x90\x44\x66\x93\x45\x83\xff\xf7\x61\xb1\xe9\x8a\xee\x2a\x47\x1d\xd7\x57\xf9\xeb\xcd\xfe\x0a\xa3\xff\x0b\xd1\xb1\xc7\xec\x5e\xa3\x75\x3d\xdf\x62\xb6\xe5\x63\x20\x4e\x6b\xe9\x89\xc8\x2a\x33\x22\xf5\x21\xe8\x7a\xbe\x00\x71\x7a\x15\x67\x22\x14\x95\x5f\x06\x44\x3c\x8f\xf8\x6d\x27\xe4\x07\xa4\x59\x60\x0a\x15\x31\xa5\x50\x4f\xd9\xd4\xd0\xba\xe6\x66\x0d\x01\x27\x82\x46\xf8\xb6\x99\xc7\xd6\x18\x43\x56\x93\x79\x5c\x1a\x99\x87\xf5\xf0\x4b\x14\x3f\xc8\x2d\xf2\x8c\x7d\x48\xdc\x42\x62\x59\xc5\xb4\x36\x79\xc6\xb4\x72\x46\x8c\xcf\xa4\x18\xb7\x4b\x02\x7f\xf5\xfb\xd0\xd8\x1a\x45\x49\x31\xb6\x3d\xf6\x20\xfe\x72\x01\x8d\x5d\xdb\xc2\xc6\xd6\xab\xc3\x1e\x84\x2b\x87\xd3\x42\x0d\x96\x66\xed\x31\x8a\xfd\xbf\xd9\x54\x53\xe3\x04\x95\x7b\x4d\x93\x39\x10\xb3\xa9\x5a\x8f\x4a\xad\xc4\xb9\x57\x4e\xe0\x06\xfe\x06\xfd\xa8\xe9\xa8\x45\x0d\x30\xb3\x2b\x6c\xa9\x01\x29\xc6\x86\x9a\xf9\xda\x26\x91\x7c\x23\x22\x71\x0c\xc8\x09\x10\xbd\x43\x1c\xd2\xac\xc8\x99\x53\xb6\x79\x44\x8f\x85\xd5\x0a\xc8\x1c\x48\x0e\x84\xe4\x7c\xdc\x14\x0b\x57\xf5\x4b\x45\x31\xab\x62\x85\xb2\x8e\x4a\x89\x2e\x98\x74\x84\xc7\x29\x4c\x8b\xa4\xfa\xe1\xa7\x1f\x7f\xf4\xb9\x68\x4b\x22\xc2\x5d\xee\xe7\xd7\x53\x44\x2b\x3e\x90\xee\x04\xf8\xd3\xdb\xb7\xdf\x00\x50\x72\x9a\xf3\xee\x92\x2d\x53\x44\x98\x26\x2d\xe2\x3e\x9c\x40\xbe\x05\xaa\x9e\x6f\x85\xa9\xe7\xae\xd4\xea\x25\x30\x81\x72\x9f\x55\x75\x59\x77\xb0\xea\xb2\x06\x12\x24\xff\x0c\x67\x39\x7f\x3e\x53\x8d\x94\x70\x78\xb8\xf4\xe6\xde\xb5\x42\x19\x76\xae\x1c\x9d\x01\x2b\x39\x7b\x02\x14\xbd\x45\x13\x7f\x96\x14\x7a\xab\xc5\x85\x7e\x89\xb5\x85\x86\x49\xe5\x5e\x82\xa6\x18\xed\x86\x09\xa3\x2e\xda\xbb\x75\xc9\x90\x8b\x2b\xea\x78\x8f\x4c\xa7\x1b\x56\x76\x44\xfa\xb1\x55\xa2\xa2\xe6\x66\x92\x71\xd5\x54\xdb\x2d\x45\x12\x82\x24\xe0\x7f\x76\x99\xbb\x90\xb6\x89\x61\xa7\xc2\x6d\xe8\xd3\x8b\x62\x75\x63\x18\xff\x4a\x9c\x0e\x80\x1f\xc3\xcc\x7f\x71\xff\x70\x43\x2e\x81\x10\xdd\xb8\xba\x71\x04\xf3\x5f\xba\x23\x5f\x04\xc6\x15\xe9\xe3\x46\xc8\x3c\x7b\xe6\xc6\x0a\xad\x3a\x28\x9c\x95\x1a\x3e\x1f\x84\xd2\x05\x7e\xf9\x74\x73\x7b\x95\xfd\xf3\xfd\xc7\x87\x9b\xd1\x3d\x7c\x1e\x26\x9e\x35\x72\x7e\x1e\xb6\xeb\x19\x95\xe6\x8a\x1b\xea\x78\xa6\x84\xfa\x95\xda\x8e\xe0\x20\x2a\xfc\x7e\xf8\x38\xba\xcb\xee\x6f\xee\xff\x7e\x91\x9e\xc3\xe5\x65\x3a\x4c\x18\x1b\x06\x8a\xc7\xd1\xe8\xf6\xea\xe6\x63\x1a\xa1\xd0\xa1\xb9\x30\x43\x08\x9f\x99\xff\xf5\x92\x23\x9a\x36\xe9\x60\x70\x00\x0f\x42\x31\x8e\x31\xea\x09\xc0\x34\xca\xc2\x54\xb8\x12\x58\x63\x9d\xae\xa0\x7e\x2a\x72\x61\xec\x62\x87\xe5\xbc\xe6\x2a\xe7\x8a\xcd\xa1\xa6\xec\x89\x16\xdc\x0e\x0e\xc0\x95\x7c\x0e\x8c\xaa\xef\x1c\x8c\x39\x0a\xc1\xca\xa5\xa6\x86\x4a\xc9\xe5\xf7\x80\xa5\x21\x50\x29\xf5\x14\xb4\xe2\x40\x1d\x50\x70\xa2\xe2\x30\xd1\x06\x79\x2d\x87\x4a\xe7\xdc\x9e\x0e\xea\xb0\xaf\xbc\x32\x36\x93\x62\xdc\x56\xfe\xae\x84\x14\xce\x3b\xf3\xb5\x60\x9b\x24\x83\x03\x78\x2c\x79\x4b\x04\x3e\xb2\x1a\xcb\x2d\x58\x5d\x71\xe0\xea\x59\x18\xad\x2a\x3c\xf2\x9e\xa9\x11\x74\x2c\xb9\x3d\x85\x7f\xf1\xa8\x5f\xd0\xc6\x69\xb4\xc3\x72\x37\x38\x40\x4b\xf0\x80\x10\xc5\x33\x35\x16\xfc\x12\x01\x46\x8e\x3d\x45\x9c\x39\x4c\x85\x77\xcb\x84\x36\xd2\x21\xa3\x2b\x39\x28\x6d\x2a\x2a\x57\xc1\x06\x07\x4b\x38\x10\x13\x50\xda\xa1\x7c\xa4\x36\x1c\x4a\x3d\xe5\xcf\xdc\x9c\x02\x3c\x96\xc2\x82\xb0\xde\x33\x0b\x5f\x0b\x6e\x51\xf2\x54\x9b\x27\xa8\xb4\xe1\x83\x03\xa8\x8d\xae\xb9\x41\xb7\xda\x55\xf5\x42\xf8\x02\x2b\xa9\x2a\xb8\x05\xc3\x9d\x11\x45\xc1\x4d\x58\x5e\x0b\xe3\xc6\x6d\xd5\x2a\xd7\xa8\xd5\xe9\x20\x7a\x2e\x43\xcf\xa5\xd7\xa3\x7f\x5c\x3c\xfe\x2d\x1d\x26\x85\xae\xa9\x2b\x87\x70\x3d\x8a\xa1\x78\x7b\x71\xfd\x90\x26\x2d\x71\x28\xbf\xda\xc9\xc7\xf7\x0f\x8f\x5d\x0a\xc7\xad\x8b\x64\x97\xd7\xa3\xec\xfd\xfd\xc5\x2f\xb7\xef\xaf\xd2\x84\x15\x3a\xe3\x0a\x55\xc8\xd7\x72\x6b\x88\xd8\xb8\x43\xf4\x32\x7e\x97\x3b\xe3\x7a\x34\x7a\xf0\x9a\x69\x8b\x7a\x5d\x7c\xbc\x0c\x8a\x52\xc3\xca\x21\x24\xab\x76\x00\xa9\x9f\x8a\x60\xc5\x53\x31\x04\x12\xba\x96\x74\x48\x6e\xa0\xa7\xff\xa8\x25\x75\x13\x6d\xaa\xac\x1d\x1a\x02\x89\x15\x66\x3a\x7c\x49\x35\x19\x6b\xc7\x21\x10\x8c\x6b\xf4\x01\x3e\xbd\x12\xb9\x30\xed\x1e\xf5\xfb\x73\x98\x08\x85\xbf\xba\x71\xfe\x31\xfe\x35\x17\xe6\x2c\xf6\xba\x24\x72\x0e\x37\x1a\xe0\x5e\xb2\x9e\x1c\xe6\x81\xb0\x1e\x2c\x34\xb4\x6a\xf8\x94\x37\x31\xba\x5a\x29\xf9\xa2\xb3\xda\xed\xf4\x87\x3a\x79\xd1\x3b\xbe\x3a\x6f\x47\xff\x6d\xb8\x37\xbe\xee\xf1\xe7\x6a\xc5\xbb\xf4\x27\xf2\xf8\x34\x95\x2e\x13\x55\xbb\x3e\xad\xaf\x71\x2f\x74\x2b\xff\xd7\x13\xae\xa8\xdd\x76\xef\xf5\x38\x05\x19\xa2\x4f\xe2\xa1\xe0\x3b\xd7\xd5\xe0\xe2\x6a\xe3\xe0\xff\x62\x8b\xff\x68\x3b\xbd\x52\x3b\xc3\xc4\x53\x78\x80\x3e\xb3\xfd\xec\x6e\xbb\x99\x7e\xde\xa8\xcc\x5f\xd1\x4a\x7b\xf5\xbe\x22\x2d\x79\xbe\x7d\x49\x69\x69\x7b\x7f\xb4\xf8\x79\xf4\x99\x9e\xec\xf3\x60\x56\xba\x4a\xbe\x72\x37\x7a\x1d\xf7\xfa\xb2\xb7\x84\x8f\x7e\x70\x1a\xbc\x8c\x9d\xfe\xa0\x79\x5e\x51\xd1\xad\x3e\x97\x0d\x10\xf6\x3f\x7b\x00\x2d\x77\x4d\x8d\x10\x28\x68\x81\xb3\x52\x90\xda\x79\xb5\xb8\x9b\x38\x80\x7b\xce\xb1\x8c\x02\x53\xc5\x4c\x27\x8c\x75\xdf\x83\xc6\xd2\x65\x2a\xb0\x76\xf3\x37\xeb\xce\xcc\x91\x8a\x19\xee\x7b\x11\xdd\xb8\xb3\xe4\x68\x4c\x2d\x57\xb4\x0a\xdf\xc7\x51\xe0\xf5\xfd\x27\x28\xa9\x05\xf2\x08\xfe\x58\xc0\xa2\xc4\xc5\xba\x07\xcb\x1b\x7f\x89\x4b\x9d\x18\x4b\x7e\xda\x73\x75\x19\x6f\x2e\x0f\x0f\x41\x2a\x20\x76\x02\x89\xa3\xa6\xe0\x6e\x5b\xa7\x10\xad\x59\x5c\x8a\xc4\x3b\x18\xa3\x9d\xde\xb8\x08\x0f\xa3\x40\x88\x7f\xc9\xb0\xe4\x49\x93\xe4\x28\x17\x26\x58\x21\xd4\x31\x10\xc2\xea\x3a\xd3\x8d\x5b\x9b\x41\xfb\x56\xaf\x78\xbc\x20\xd2\x2f\x9f\xec\x47\xd8\x27\x3f\xd7\x53\x25\x35\xed\x96\x44\x47\xc0\x1a\x23\x81\xf8\x4b\xaf\xc5\x6d\x48\x72\x84\x4d\x3d\x90\xf3\x20\xfe\xf0\xd0\xef\x41\x18\x26\xc9\x91\x2d\xe9\x9b\xb7\x3f\xd9\xd8\x45\x1d\x0f\x21\xf5\xc3\x8e\x0a\xb9\xa0\x87\x90\x05\x8e\xe1\xf7\xdf\xe1\x68\x75\x09\xde\x01\x9f\x09\x07\xe7\x70\xdc\xe3\xf6\xab\xa8\x21\xfa\x1d\x75\xea\x14\x1c\x8d\xfa\x4d\x74\x1b\x7c\x3f\xe6\xaf\xa2\x31\xe8\x7d\x5a\x09\x8d\xd2\x17\x20\xa7\xf0\xc9\x4b\x09\xec\x1d\xd0\xb1\x47\x78\xb3\xf3\x3e\x3c\xd2\x00\x21\x4f\x9c\xd7\x40\xc8\xbf\x1b\xc1\x1d\x10\x62\x5d\x1e\x7b\xc5\xb6\x7d\x0b\x05\x7a\x86\xa2\xb3\xc8\x96\x2e\xee\x25\x16\x76\xba\x8d\xeb\x34\x47\x0d\x90\x19\x90\x91\xb7\xe7\xdb\x6c\x45\x59\xbd\xb6\x1a\xad\xba\x59\x62\x59\x5e\xe3\xe4\xae\xee\xfa\x3a\xb6\xa4\x50\x51\xcc\x10\x05\x87\xc6\xe2\x42\x7a\xa1\xb1\xc3\x9a\x68\xec\x98\xfc\x68\xe3\xfb\x07\xef\x0d\xd0\x6a\xa5\xa7\x70\x25\x36\x7b\x86\x43\xe8\x8b\x73\x10\x0a\xdb\x45\xad\xa5\xe7\x39\xf5\xed\x94\x6f\xa4\xc0\x70\x6a\xb5\x8a\x2d\x61\x48\x06\x9e\xdb\xf7\x96\x42\x81\x6b\x0c\xf2\x2e\x51\x70\xeb\xd8\x85\xe0\xf1\x1c\x6a\x6e\x48\xf8\x77\x62\xad\x4d\x5b\xdc\x2b\x6d\xf5\x86\x50\x3e\x65\x62\x1f\x35\x5c\xf7\x8a\xe1\xd6\x51\x97\x9e\x2f\x64\x84\x5e\xab\xaf\xf7\xff\x0e\x99\xfe\xe2\xd9\xbf\xfb\x39\xfc\x43\xf5\xae\x3d\x1d\xd3\xf8\xf7\xd6\x6a\x6b\x9e\xae\x35\xea\x90\xb4\xb2\x57\x02\x6c\x11\x0a\xfd\x71\xd0\xf9\x3b\xec\x3f\x01\x00\x00\xff\xff\xa1\x9d\xde\x9d\xe7\x1c\x00\x00"

func rulesRulesNinjaBytes() ([]byte, error) {
	return bindataRead(
		_rulesRulesNinja,
		"rules/rules.ninja",
	)
}

func rulesRulesNinja() (*asset, error) {
	bytes, err := rulesRulesNinjaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules/rules.ninja", size: 7399, mode: os.FileMode(420), modTime: time.Unix(1569486297, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rulesStaticNinja = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x51\xb1\x8e\xd4\x30\x10\xed\xf3\x15\x4f\xca\x16\x20\x9d\xb2\x40\x85\x90\xa8\xae\x40\x74\x48\x47\xbf\x9a\xb5\x27\xf6\x70\xde\x71\x34\x76\xb2\x5a\x89\x8f\x47\x71\xb2\xc0\x51\xa0\xab\xec\x19\xbf\x79\xef\xcd\x73\x8f\xc7\x3c\xdd\x4c\x42\xac\xf8\xf0\xee\xfd\x47\x3c\xb9\x28\xe7\x52\xd9\x77\x5d\x8f\xa7\x4a\x55\x1c\x6c\x4e\x5c\x30\x66\x83\x63\xab\x24\x8a\x4a\x16\xb8\x96\x01\xdf\xa3\x14\x8c\x92\x18\x52\x20\xea\xd2\xec\xd9\x23\xab\x63\x4c\x6c\x18\x13\x2d\xd9\x1e\xba\x1e\xb3\x26\x79\xe6\x8d\x6a\x50\xd1\x1f\xf4\x80\x6b\x14\x17\xd7\x41\x42\x48\xf9\x4c\xe9\xce\x30\xac\xe2\x8f\xc6\x54\x19\x84\xf3\x2c\xc9\x63\x61\x2b\x92\xf5\x0e\xd9\x44\x49\x3d\x08\x91\xd4\xdf\xe0\x79\x62\xcf\xea\x6e\x90\xb1\x99\xad\x51\x34\x94\xae\x47\x8d\x54\xa1\xcc\x1e\x35\xc3\x78\xe3\x93\x11\x35\xf2\x3f\xe4\x2e\x92\x06\x2e\x43\xb7\xb5\x0f\xa2\xce\x8b\x1d\x5b\x75\xda\x41\xa7\x43\x2b\xf7\x6a\x88\x9f\xf0\xe2\xf9\x7f\xa3\x2b\x58\xb4\x54\x4a\xe9\xe4\xb2\x8e\xaf\x13\x58\xc3\xf8\xc2\xca\xb6\xc6\xb1\x7a\x5e\xc8\x84\xce\xbf\xff\x24\x5f\x26\x49\xa2\x01\x83\x68\x8b\xa5\x0c\x5d\x8f\xa3\xe7\xe5\xa8\x73\x4a\x2d\x18\xdd\x93\x29\x98\x4c\x2e\x64\x92\x6e\x2f\xc2\xd0\xa1\xf9\x11\x85\xf2\x15\x3e\xbb\x67\x36\xc8\x85\x02\x17\xbc\xb9\x4a\x8d\xad\xff\xf5\x5b\x79\x3b\x74\xa2\x0d\xfb\x19\x9b\xcf\x9a\x73\x2a\xc7\x9d\xe1\xaf\xed\xb3\x8e\xeb\xb6\xeb\x29\x61\xc7\x2e\x64\x05\x87\xad\xd5\xee\x3f\xef\x50\x09\x7f\x1c\x77\xbf\x02\x00\x00\xff\xff\x9c\xe3\xe7\x83\x96\x02\x00\x00"

func rulesStaticNinjaBytes() ([]byte, error) {
	return bindataRead(
		_rulesStaticNinja,
		"rules/static.ninja",
	)
}

func rulesStaticNinja() (*asset, error) {
	bytes, err := rulesStaticNinjaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules/static.ninja", size: 662, mode: os.FileMode(420), modTime: time.Unix(1568807306, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"internal/assets/main.go": internalAssetsMainGo,
	"rules/compiler/clang.ninja": rulesCompilerClangNinja,
	"rules/compiler/gcc.ninja": rulesCompilerGccNinja,
	"rules/compiler-flavor/.gitkeep": rulesCompilerFlavorGitkeep,
	"rules/defaults.ninja": rulesDefaultsNinja,
	"rules/flavor/dev.ninja": rulesFlavorDevNinja,
	"rules/flavor/gcov.ninja": rulesFlavorGcovNinja,
	"rules/flavor/release.ninja": rulesFlavorReleaseNinja,
	"rules/rules.ninja": rulesRulesNinja,
	"rules/static.ninja": rulesStaticNinja,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"internal": &bintree{nil, map[string]*bintree{
		"assets": &bintree{nil, map[string]*bintree{
			"main.go": &bintree{internalAssetsMainGo, map[string]*bintree{}},
		}},
	}},
	"rules": &bintree{nil, map[string]*bintree{
		"compiler": &bintree{nil, map[string]*bintree{
			"clang.ninja": &bintree{rulesCompilerClangNinja, map[string]*bintree{}},
			"gcc.ninja": &bintree{rulesCompilerGccNinja, map[string]*bintree{}},
		}},
		"compiler-flavor": &bintree{nil, map[string]*bintree{
			".gitkeep": &bintree{rulesCompilerFlavorGitkeep, map[string]*bintree{}},
		}},
		"defaults.ninja": &bintree{rulesDefaultsNinja, map[string]*bintree{}},
		"flavor": &bintree{nil, map[string]*bintree{
			"dev.ninja": &bintree{rulesFlavorDevNinja, map[string]*bintree{}},
			"gcov.ninja": &bintree{rulesFlavorGcovNinja, map[string]*bintree{}},
			"release.ninja": &bintree{rulesFlavorReleaseNinja, map[string]*bintree{}},
		}},
		"rules.ninja": &bintree{rulesRulesNinja, map[string]*bintree{}},
		"static.ninja": &bintree{rulesStaticNinja, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

