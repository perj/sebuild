// Code generated by go-bindata. DO NOT EDIT.
// sources:
// ../../internal/assets/main.go
// ../../internal/tools/copy_analyse.pl
// ../../internal/tools/go-install.sh
// ../../internal/tools/gobuild.sh
// ../../internal/tools/gperf_enum.pl
// ../../internal/tools/header-install.sh
// ../../internal/tools/in.pl
// ../../internal/tools/link.pl
// ../../internal/tools/python-install.sh
// ../../internal/tools/ronn_wrapper.sh
// ../../internal/tools/swig_header.sh
// ../../rules/compiler/clang.ninja
// ../../rules/compiler/gcc.ninja
// ../../rules/compiler-flavor/.gitkeep
// ../../rules/defaults.ninja
// ../../rules/flavor/dev.ninja
// ../../rules/flavor/gcov.ninja
// ../../rules/flavor/release.ninja
// ../../rules/rules.ninja
// ../../rules/static.ninja
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _internalAssetsMainGo = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\x4a\x2b\xcd\x4b\x06\x33\x35\x34\x15\xaa\x6b\xb9\x00\x01\x00\x00\xff\xff\xc8\xaa\xa2\x94\x1d\x00\x00\x00"

func internalAssetsMainGoBytes() ([]byte, error) {
	return bindataRead(
		_internalAssetsMainGo,
		"internal/assets/main.go",
	)
}

func internalAssetsMainGo() (*asset, error) {
	bytes, err := internalAssetsMainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/assets/main.go", size: 29, mode: os.FileMode(420), modTime: time.Unix(1534853251, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalToolsCopy_analysePl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x5f\x73\xda\xba\x12\x7f\xc6\x9f\x62\xeb\x9a\xd8\x34\x0e\x4a\xee\x7d\xb9\xe3\x7f\x13\x4a\x68\x6e\x66\x68\x92\x0b\xdc\xce\xe9\x09\x2d\x63\xb0\x00\x0d\xc6\xf2\x91\x04\x34\x65\xdc\xcf\x7e\x46\xb2\x0c\xa6\x69\xe7\x3c\xf4\x9c\x97\x04\xad\x76\x7f\xbb\xda\xfd\xed\xae\x5f\xbf\x42\x1b\xce\xd0\x94\x64\x08\x67\x5b\xc8\x31\x4b\x8d\xd7\xd0\xa5\xf9\x33\x23\x8b\xa5\x80\x7f\x5d\x5e\xfd\x07\x86\xb3\x25\x99\x72\x81\x13\xc3\xd8\x70\x0c\x5c\x30\x32\x13\xbe\xfa\x7d\x8b\x05\xcd\x85\xe7\xf5\x69\xb6\x28\x25\xef\x48\x8a\x3d\xef\x31\x16\xcb\xfa\xf9\x1d\xc9\x92\xf2\xdc\xdd\xe9\x1f\x8f\x0f\xc3\xbb\xdf\xe0\x8f\x9d\xc3\x05\x9b\x0b\xb2\xc6\x2d\xdf\x30\xd6\xcf\x60\xcd\x49\x16\xa7\xe4\x2b\x86\x10\x2e\x7d\xc3\xb8\xc5\xe2\x21\x17\x84\x66\xdc\x31\xab\x2b\x13\xc2\x08\xc6\x07\xcd\xca\x92\x6e\x44\xbe\x11\x10\x4a\x27\x9e\x17\x4f\xf9\x24\x8f\xc5\xd2\xe1\x4b\x32\x17\x52\xe7\x18\x9b\xe7\x31\xbc\xa6\x5b\x3c\x11\x0c\x63\x47\x1b\xba\xb0\x87\x15\xc6\xf9\x84\x51\x2a\xa4\x87\x2b\x28\x5a\xbe\xb1\x5e\x25\x84\x55\x3a\x12\x86\x6f\xa6\xb0\xc0\x19\x66\xb1\xc0\x13\x92\x25\xf8\x8b\x63\xb5\x60\x6f\x34\x64\x0c\x9c\xcd\x12\xc2\x20\x04\x6b\xf2\x74\xf9\xc9\x37\x94\xb4\xa9\xb4\x20\x04\x47\xda\x37\x8e\x39\xf1\xbc\x39\xc9\x12\x67\xbf\x8b\x33\x81\x13\xe9\x53\x82\xef\x8d\x46\x23\xc3\x5f\x04\x90\x39\xbc\x42\xe3\xf6\x52\xac\x53\x0b\x49\xcb\xca\x85\xc2\x57\x02\x9a\xe3\x0c\x86\x83\xae\x0b\x76\x60\xbb\xe5\x25\x65\x90\x10\x0c\xe6\xbb\x98\xa4\x38\x01\x41\x41\x69\xc9\x3b\xd3\x2f\x41\xae\x65\x9c\xb1\x88\x21\x84\x60\x38\xe8\x46\x52\x3c\x4b\x29\xc7\x12\xab\xf2\x74\x2d\x88\x48\x31\x87\x10\xd6\x71\x0e\xe8\x73\xa0\xce\x91\xd3\x7e\xd3\x0a\xc6\xa8\x3c\x58\xc8\x3d\x80\x69\xec\xe6\x1a\x2b\x60\x6d\xf4\xea\xe2\x02\xde\xfe\xff\xd6\x79\xfa\x0c\x9f\xce\x5b\x20\xad\xe1\xe2\xe2\x85\x21\x99\x83\xa3\x1d\xaa\x64\x36\x1a\x96\xc4\xd9\xdb\x9c\xcd\xec\x42\x3e\x98\xb3\x99\x54\x6c\xec\x96\x24\xc5\xe0\x80\x23\x93\xb1\x72\x41\xfe\xdb\xb6\x20\x04\x1c\xcf\x96\xa5\x77\x8d\xd0\xb0\xb6\x10\x7e\x03\x8e\x02\x74\x96\x0a\x1f\x2d\xfc\x13\x69\x84\xce\x16\x35\xa9\x72\x67\xad\x94\xaf\xad\x92\x15\xf2\x4f\xbe\xe1\x4b\xb8\xde\x5b\xaa\x86\x7b\xab\x0c\xf1\xe9\xf2\x53\x51\xb8\x30\x56\xde\xa4\x6e\x61\x18\x0d\x29\xd1\x04\x50\x75\x56\x59\xbf\x19\x8e\x5c\xb0\x23\xdb\x05\x53\xdf\x21\x85\xa4\xaa\x6a\xfe\xb4\x56\x25\xdd\x6a\xaa\x30\xa7\x0c\x4a\xa9\xa9\x69\x65\x65\x74\x07\x21\x54\x0d\x04\x66\x33\x86\xe6\x14\x9a\x18\x9a\x1f\x21\x16\xd0\xfc\xaf\xd7\x7c\xef\x35\x87\xa6\x0b\x8b\xb5\xd4\xf0\x4b\x33\x86\x73\xca\x04\xd7\x0d\xd6\xc8\x19\xc9\x84\x8c\x13\xcc\x40\x7a\x8a\x82\x25\x8e\x93\x48\x57\x7b\x96\xc6\xd9\x02\xe2\x2c\x4e\x9f\xbf\x62\x28\x4d\x5d\xe5\x3a\xd0\x14\x08\x90\xd2\x1f\x67\xc1\x94\x26\xcf\xd1\x38\x93\x24\xab\x83\xe6\xd1\x40\x99\x1d\xba\x26\xd1\xf6\xf9\x0f\x94\x93\x54\x0b\xe7\x94\xa9\x82\xaa\x2a\x83\x03\x5c\x22\xac\xf0\x33\xaf\xda\xa9\x2c\x72\xf9\x20\xf9\x18\x33\x48\x44\x64\xad\x02\x94\x08\x19\x4c\x92\x44\x01\xad\xc0\x14\x9d\x65\xad\xa4\xa2\x42\xda\x83\x15\x5f\x44\x7b\xbb\x7f\x77\xdf\xb3\x0b\x08\xc2\x08\xac\x69\x4d\x50\xd4\x6a\xbe\x2a\x0a\x89\x51\x8f\x48\x71\xdc\x29\x21\x35\xdb\xa4\x38\x25\xd9\x0a\xda\xa1\x22\x94\x1d\xa4\x24\x0a\x78\x1e\x67\xa0\x12\x15\x9a\x76\x5b\xd9\x49\x2f\xdd\xce\xa8\x77\xfb\x30\xf8\x68\x17\x6d\xdb\x83\xda\xc5\xe8\xe3\x63\x4f\x0a\xcd\xc8\x86\xb6\xc6\x89\x61\xc9\xf0\xfc\xc4\x5e\x75\x45\xdb\x7e\xdd\xcb\x12\x39\xd0\xcc\x28\x25\x19\xae\xe3\x94\xcf\x68\x9b\x01\x8a\x23\x0f\xcc\xe3\xc5\x4d\x6f\xd8\x2d\x2f\x64\x68\x51\x80\x52\x52\x25\xa9\xa1\x32\xd9\x0e\xcb\x77\x28\xc9\xf9\x79\x45\x97\x92\xe5\x47\x1d\x33\x40\x34\x8d\x02\x94\x24\x95\xf9\xb1\x8c\x52\xc7\x37\x54\x53\xc8\xbe\x3e\x32\x2e\x84\xcb\x32\x5b\x27\x25\x17\xd1\x3d\x05\xcc\x18\x65\x5c\x33\x0c\x27\x6d\x5d\x47\x53\xe3\xd4\x0d\xd0\x81\x24\x27\x52\x4d\xbf\x00\x29\x16\x2b\x05\xa3\x9c\x6a\xce\xcd\x70\xa4\x5a\x92\x61\xb1\x61\x19\x1c\xdf\x54\x54\x6b\xe1\x6f\x18\xc7\xe5\x39\xe1\xe2\x30\xad\xfe\xe1\x01\x6d\xcd\xe3\x94\xe3\x49\x4e\x39\x11\x64\xab\x37\x66\xa3\x81\x3e\x97\xcf\xbb\x40\x70\x76\x06\x09\x3d\xd2\x53\xf1\xd0\xaf\x4e\xd3\xcd\x22\xcd\x36\x6b\xbf\x46\xde\x03\x86\x24\x3b\x38\x55\x14\xd5\x3c\x4d\x63\xae\xd2\xf0\x9d\x63\x3d\x40\xa5\xfd\xf9\xb9\x3e\x28\x57\x32\x11\x57\xd2\xe0\x67\xcb\x43\x2b\xeb\x48\xea\xea\x7a\x6d\x48\x1a\xd7\x76\x86\xd6\x7f\xf1\x6e\x65\x75\x80\x39\x3b\x03\x44\x92\xd0\xec\xdf\x57\x22\xb3\xfd\x66\xd4\xb9\xeb\xff\x6f\x32\xe8\xbd\x7f\xf8\xd0\xfb\x15\x9c\xc1\xdb\xc9\x6d\xef\xbe\x37\xe8\x8c\x7a\x93\xe1\xa8\x33\xba\xeb\xfe\x0a\x5a\xa7\xdf\x7f\xe8\x4e\x1e\x7b\x83\xf7\x9d\xfb\xde\xfd\x68\xf2\xfb\x87\x4e\x1f\x1d\x97\x8f\xea\x1e\x95\xac\xc3\x4a\xd3\x89\xfd\x06\xdc\x45\xee\x64\xe2\x56\xeb\x4b\xf1\x4e\xae\x35\x5d\x7d\x54\x6a\x1e\xc1\x0a\x45\x9b\x8a\xc9\x2f\x4a\x58\x71\xb5\xbe\xb0\xf4\x16\x92\xd8\x7f\xb9\xaa\x94\xd2\xe9\x18\xa8\xef\xf7\xd3\x3e\x2c\x8c\xc2\x85\xeb\xce\xe0\xf6\x43\x4b\x06\xa3\x7e\xf9\x86\xa1\x9e\x7b\xf8\xac\xab\xbe\xa9\x8e\xfb\xea\xfb\xcf\xae\xc3\x47\xd9\xe9\x98\x89\x4e\xa7\xcc\x70\x74\xd3\x1b\x0c\xc0\x1c\xe3\xa7\x7f\x5f\xf9\x57\xeb\x11\x15\x71\x0a\x74\x0e\x26\xb4\x8f\xe8\x6d\x30\xf5\xf0\xe1\x63\xfc\x74\xb9\x3e\x19\x6a\x15\xc4\x9a\x66\x0b\x2a\xbb\xf0\x82\x55\x0f\xff\xa1\x9e\xa0\x90\xc6\x9b\x6c\xb6\x84\x1d\x9e\x02\xc7\x6c\x8b\x99\x2b\x33\x38\x65\x74\xc7\xb1\x4c\xde\x5c\x8e\x1d\x84\x52\x3a\x8b\xd3\x25\xe5\x02\xbd\xdc\xf9\x1a\x1a\x7f\x21\xc2\xb9\x6a\xa9\x41\x58\x18\xc6\x9f\x01\x00\x00\xff\xff\xf0\xe2\x95\x42\xb5\x0b\x00\x00"

func internalToolsCopy_analysePlBytes() ([]byte, error) {
	return bindataRead(
		_internalToolsCopy_analysePl,
		"internal/tools/copy_analyse.pl",
	)
}

func internalToolsCopy_analysePl() (*asset, error) {
	bytes, err := internalToolsCopy_analysePlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/tools/copy_analyse.pl", size: 2997, mode: os.FileMode(493), modTime: time.Unix(1534840966, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalToolsGoInstallSh = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\xb1\x4e\x85\x30\x14\x87\xf1\xf9\x9e\xa7\xf8\x7b\xee\x59\x49\xed\x9d\x8c\x06\x16\x5d\xba\x14\x13\x21\x0e\xc6\x04\xa9\x2d\x6d\x02\xc5\x40\x07\x7c\x7b\x07\x13\xd6\xef\xfb\x5d\xef\xd4\x98\xb2\xda\x23\x5d\xf1\xbc\xfe\xfc\x6e\x69\x8a\x05\xb7\x7b\xfd\x80\x37\x17\xd3\xb8\x17\xff\x4d\x64\x6c\xcd\xa2\x99\xda\xbe\xab\x59\x6e\x4c\x94\x02\x3e\x50\x65\xf0\x30\xad\x61\x29\xa8\x66\x88\xb1\x03\xe3\xf3\x09\x25\xfa\x4c\x97\xff\x2e\xc6\xd2\xc5\x1f\xa9\x40\x53\x48\xb4\x2d\xa8\x02\x58\xda\xbe\x63\xf2\x2e\xae\x60\xa5\xe6\x94\x3d\xe4\xf5\xfd\x45\x89\xb1\x8f\x9a\xd1\x9c\xe2\xf0\x0e\xee\xab\x80\xc5\x58\x46\x73\x8e\xbf\x00\x00\x00\xff\xff\xb4\x29\x28\x38\xb7\x00\x00\x00"

func internalToolsGoInstallShBytes() ([]byte, error) {
	return bindataRead(
		_internalToolsGoInstallSh,
		"internal/tools/go-install.sh",
	)
}

func internalToolsGoInstallSh() (*asset, error) {
	bytes, err := internalToolsGoInstallShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/tools/go-install.sh", size: 183, mode: os.FileMode(493), modTime: time.Unix(1534840966, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalToolsGobuildSh = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x5f\x6f\xdb\x38\x12\x7f\x36\x3f\xc5\x2c\xad\x5b\x6f\x00\xcb\x6e\xbb\xbd\xbb\x45\x0a\x2d\x2e\x6d\xd2\xac\x91\x22\x0d\x2e\x29\x7a\x40\x9b\x0b\x68\x69\x24\xb1\xa1\x49\x81\xa4\xe2\x78\x1d\xdf\x67\x3f\x0c\x29\xff\x49\xdc\x87\xe6\x1e\x0e\x7e\xb0\x44\x0e\xe7\xef\x6f\x7e\x1c\xf5\x7f\x1a\x4f\xa5\x1e\x4f\x85\xab\x59\x1f\xde\x99\x66\x61\x65\x55\x7b\x78\xf5\xe2\xe5\x6f\x70\x99\xd7\x72\xea\x3c\x16\x8c\xf5\xe1\xad\x6d\x3d\x42\x69\x6c\x8e\x30\xb7\xa2\x69\xd0\x82\xcb\xad\x6c\x3c\x78\x03\x52\x7b\xac\xac\xf0\x08\xd3\x56\xaa\x42\xea\x0a\x2a\x03\xb9\x29\x90\xb6\x0c\x98\xd6\xb2\x7e\xdc\x03\xb7\x70\x1e\x67\x23\xb8\xaa\x91\x84\xbc\x31\xca\x81\xb0\x08\x62\x26\xfe\xa4\x93\xa5\xb1\x7b\x6a\x86\x30\x6d\x3d\xeb\x83\xaf\x71\x11\x85\x61\x2a\x3d\x34\xd6\xdc\x49\x9d\x4b\xa1\x82\x3e\x8b\x20\x5d\xd8\xaa\x2a\xb4\x30\x37\x56\x15\x60\x5a\x4f\xc7\xe8\x8c\x2e\x58\x1f\x9c\x99\xa1\x97\x33\x74\xb0\x30\x2d\x68\xc4\x82\x22\xc8\x8d\x69\x30\x44\x30\x97\xbe\x06\x43\x27\xdc\x30\x88\xe4\x42\x0f\x3c\x7c\x6b\x9d\x8f\x6e\xb1\x3e\x2d\x5b\x30\x73\x0d\x0d\xda\x12\x73\x0f\xad\x37\x8d\x14\x64\x01\x1a\x8b\x1e\x75\x01\xbe\x16\xc1\xf0\xd6\x0d\x27\x0b\x84\xc2\xa0\xd3\x03\x8a\x05\xef\xa5\xf3\x23\x4a\xee\x67\x04\xbc\x6f\x48\x0f\xc9\x9f\x7e\xbc\x38\xba\xfa\x03\xee\x84\x95\x62\xaa\x90\xbc\x9b\x22\x38\xf4\xd0\x18\xa9\x3d\x65\xc5\x1b\x10\x4a\x41\x65\x58\x3f\xa4\x87\xa2\x97\x8e\x82\x2f\x8c\xa6\x9c\x43\x6e\x74\x29\xab\x91\x96\xfa\x9b\x18\x91\x81\xb9\x54\xaa\xab\x00\x19\x69\x44\x7e\x2b\x2a\x84\x99\x90\x1a\xa4\x66\x7d\x28\xa4\xc5\xdc\x1b\xbb\x80\xe4\x15\x19\x20\xa9\xa9\xd4\xc2\x2e\x48\x5f\xf2\xeb\x10\xe6\xb5\x54\x54\x7d\x19\x7c\xa0\xbc\x16\xd8\xa0\x2e\x50\xe7\x12\x1d\xeb\xc7\x5a\xd3\xb9\x92\x04\x93\xd7\xb1\xc8\xbb\x42\x9d\x1b\x08\xc2\x41\x6e\x2c\x59\xa4\xc7\x39\x52\x96\x61\x26\x6e\x31\x16\x79\x06\xce\xc4\x0c\xce\x29\x65\x54\x80\x5a\xdc\x85\x5c\xd8\x56\x13\x2a\x62\x28\xa2\x22\xff\x5b\xad\xd0\x05\x2d\x9d\x10\x81\x0d\x73\xd1\x3a\x04\xbc\x43\x1d\x6b\x2a\xc0\xc9\x59\xa3\x10\x6a\x54\xca\x74\x65\x69\xac\xa9\xac\x98\x81\xf4\x03\x07\xaf\x5e\xdc\x83\x53\x66\x8e\x96\x6c\x53\x52\x6c\xab\x75\x0c\xd6\x3e\x86\x2f\x63\x17\x67\xa7\x59\xf2\x92\x4d\xce\xb3\xe4\x15\xfb\xf8\xe9\x2a\x4b\x7e\x65\xc7\x27\x17\xef\x27\x1f\x4e\xb2\xe4\x35\xcb\x4b\x25\x2a\x97\xf1\xe4\xaf\x9c\xa9\x62\xfd\xf2\x37\xce\x66\xa6\xc0\x8c\x27\x7f\xe7\xac\xb9\xad\x0a\x69\x33\x9e\xfc\xc6\x19\xfb\xe7\xc9\xd1\xf1\x87\xc9\xf9\x59\xc6\x93\x5f\xfc\xa2\x41\x48\x1b\xa8\x2c\x8a\x42\x49\x7d\x0b\x9b\x87\x07\xa8\x51\x14\x90\xbe\x3c\xe0\xec\xe8\xed\xe5\xe4\x9c\xe4\x93\xf5\x61\x48\x4b\xe0\xc9\x72\x72\x7e\x98\x8e\x56\xfc\x80\xb3\xd0\xd5\xfa\x0e\xad\x07\x8b\x4a\x78\x79\x47\xa5\xf7\xb5\x0b\x10\x9a\x3a\xa3\x5a\x8f\x43\x70\x52\xe7\xa1\x1b\x43\x79\xf2\x5a\xe8\x0a\xb7\x80\x18\xb1\x77\xa7\x1f\x6f\xde\xbd\xff\x70\x74\x7a\x99\x71\xce\xa8\x41\xcb\x00\x8a\x18\xe4\x1b\x28\x0c\xeb\x7d\xf9\x02\x3c\x29\x39\x64\xff\x81\x7f\x7f\x49\xc7\xd7\x70\x7d\x0d\x0f\x0f\x50\x66\x3c\xb9\xf8\x7c\x3c\x4e\x4a\xce\x7a\xbb\x7a\x92\xed\x0b\xd0\x26\x21\x97\xe1\x7d\x63\xac\x87\xed\x56\x30\xfd\xe1\x78\x63\xdb\x4c\xbf\xb9\xc7\x3e\x74\xc9\xfd\x71\x27\x64\x09\x3b\x62\x5f\x47\x26\x81\xeb\xeb\x37\x84\x3a\xcd\x7a\xbd\x68\x20\xa1\xbf\xe0\x56\x0f\x95\x43\xd6\xeb\x3d\xf2\x23\xd9\x79\x8b\x52\xa5\xdc\x0b\xa0\xdb\x67\x8c\x0c\x42\x54\xc9\xe1\xa7\x0c\x38\x87\x8d\xbd\x3e\x4c\xca\x0d\x70\xcd\xf4\x1b\x35\x04\x75\x8f\x1b\xd2\xea\x5c\xe8\xc0\xaf\x46\xab\x05\x34\xc2\xb9\xd8\x1b\x9b\x2e\xd3\x42\x01\xc1\x62\x48\x8a\x02\x67\xcd\xa5\xc3\xc8\x92\xb3\xc0\xe4\xd4\x6a\x45\x41\x1c\x37\x97\x39\x8e\xe0\x93\x2e\x8d\xf5\xad\x16\x1e\xd5\x62\xb8\x2b\x69\xb1\x44\x8b\x3a\x47\xd2\xa5\x71\x0e\x4a\x4e\x2d\x75\x7f\xf4\xca\x0d\xa9\x25\xb7\x2d\x16\xdd\x21\x16\x22\x57\xa2\x2c\x35\x78\xe8\x66\xa5\x46\xac\x77\xf2\xaf\xab\x75\xc2\x7e\x49\xbb\x2a\x01\x4f\xf1\xde\xaf\x5f\xbe\xae\xf3\xbc\x93\xae\xaf\x9c\x1f\xb0\x98\xf3\x5d\x05\x07\xac\x94\xbb\x68\xee\x48\xf2\xfb\x28\x2e\x70\x26\x74\xe1\x40\xfa\x11\x1c\x29\x67\xa0\x94\x55\x6b\x31\x50\x56\x73\x5b\x81\x16\x33\x04\x59\x42\xab\x1d\xfa\x11\x33\x56\x56\x37\x93\xf7\x54\xd7\xc9\xfb\x4b\xce\xc2\xe3\x21\x67\x95\xa1\x56\x59\xa3\xad\x09\x68\x8b\x76\x23\xd8\x8e\xde\x5e\x5e\x64\x4f\xba\x2f\x69\x0e\x58\xef\x0b\xa4\x7f\x02\x4f\x68\x9f\xc3\x35\xfc\xfc\x33\xd1\xb1\x97\xba\xc5\xcd\xde\xc5\xd9\x69\xb7\x45\xd0\x58\x86\x56\xee\x87\x13\x63\x67\xf3\xf1\x2a\x02\x25\x09\xeb\x9d\x20\x11\xce\x77\x45\x59\x6f\xed\x69\x12\x1f\x0e\xa3\xe9\x88\xc8\x18\xd8\x3a\x46\xce\xfa\x70\xe9\xad\xa4\x68\xa4\x97\x42\xc1\x21\x8b\x31\x91\xee\xee\xf8\xcb\x15\xef\x50\x1b\x7c\x25\xc6\xda\x81\x6c\x24\x30\x22\x4e\x1e\x8a\xf2\xf6\xd3\x64\xd3\x18\xa9\x84\x34\xd2\x1a\xec\x25\x26\x2c\x1f\x8c\x2b\xd3\xdc\x56\x37\x41\x29\xa4\x52\x3b\x2f\x94\x72\x6d\x59\xca\xfb\x2c\x5a\xda\x34\x4c\xb4\x9b\x01\xf7\xe8\xfc\x8e\x03\x7b\x29\xcc\x8b\x4d\xaa\x58\x0f\xef\x31\x0f\x83\x05\x3a\x4f\xf5\x0a\xee\xdd\x5c\x9d\x5c\x5e\xdd\x74\xfd\x7a\x71\x76\x4a\x8e\x3f\xb5\x32\x45\x9d\xd7\xff\xa3\x99\x8b\xb3\x53\x48\x83\x02\x48\x5e\x7f\x4f\x79\x6e\xee\xd0\xde\xd4\x7e\xa6\x76\x2c\x6c\x74\x18\xa3\x20\x48\x40\x4a\x22\x59\x32\x39\x87\xd4\x40\xf2\xf1\xd3\x55\x48\xb1\x69\xfd\x1e\xcf\xd3\x26\x31\xfc\x9e\x9b\x4d\xeb\xea\xad\xa7\xf0\x3b\x8c\x0b\xbc\x1b\xeb\x56\xa9\xfd\xcc\x06\xa3\x3b\x1e\xad\x03\x4a\xc3\x46\x63\x0d\x71\x51\x96\x50\xe3\x84\xb4\xed\x27\xa5\x31\x4d\xf1\xc8\x46\xec\xdd\x27\x86\x08\x2d\xa9\x36\x79\x65\xb6\xb6\x02\xa5\x9e\x9c\x1f\xbd\xfd\x70\x72\x9c\xbd\x60\xbd\xde\x0e\x77\x76\xcb\xac\xd7\xdb\x5c\xf5\xc9\x16\x67\x94\x1b\x4e\x4e\x71\xea\x9d\x2d\x4d\x7c\xf9\xc7\xf5\x8a\xc7\x62\x3c\x3c\xd0\x7c\xe5\xe1\x25\xeb\xfd\x80\xcf\x3d\x54\x7b\x70\x27\x15\x4f\x43\xd8\x71\xfe\xff\xe5\x57\xb8\x7c\xfa\xdb\x89\x87\xe8\xde\x81\xd0\x40\xe0\x69\xfd\x7a\x42\xc4\x7b\x6f\x45\x37\x40\xba\xc5\x6c\x6a\x94\x1b\xd1\xd5\xe2\xbb\xb9\x50\x40\xa3\xda\x4a\xea\x38\x0a\x0f\xc2\x10\x16\x14\xb7\xda\xa2\x33\xea\x0e\x8b\x9d\x73\x95\x36\x16\x41\x9b\xf9\x10\x6a\xa1\x0b\x15\x46\xca\xed\x75\x33\x7a\x7a\x1f\xa6\x9f\xd5\x30\x4d\xb7\xaa\xd2\x4e\x55\x26\x83\xa6\x54\xea\x34\xde\x22\x69\xb8\xdb\x1e\x11\x3e\x67\xbd\xa7\x68\xe1\x8d\xcc\x95\x9c\xee\xe0\x92\x3c\x4d\x45\x18\x85\xe3\x14\xe6\x85\x2e\x84\xa5\x74\x4c\x5d\x1c\xef\x52\x57\x0b\x8b\x05\xc9\x7e\xbf\x36\x61\x29\x90\x57\x9e\x0a\x9b\xd7\x34\x0b\xa5\x55\x37\xa7\x0d\xba\xe3\x03\x48\x85\x9b\xed\xaf\x3d\xb3\xb4\x5d\xdd\x9e\xe3\xc9\xb3\xf4\x97\xf2\xc7\xf0\x13\xe7\x8b\xf8\xf9\x33\xa7\xeb\x7d\xe0\x41\xe8\x05\xc4\x56\x0b\xe3\x44\x18\x28\xc3\xd7\x12\x6d\x4e\x11\x72\x8b\xc2\x63\x11\x3e\xb9\xe8\xc2\x8f\x9f\x26\x58\x80\xf4\xdd\xb7\x48\xd0\x47\x20\xf0\xa6\xcd\x6b\xd8\x63\xa6\xe5\xc7\x4f\x57\x7f\x19\x89\xd5\xa8\x3e\x88\xa3\x11\x71\xd8\x2f\x79\x01\x91\x93\xe0\x0d\x60\x5e\x1b\x48\x35\x70\x62\xb1\x43\xe0\xf0\x86\x10\xae\x24\x51\x4f\x18\x61\x2f\xce\x4e\xc3\x0c\x3b\x80\xe5\xd2\x86\x71\x74\x74\x8c\x8d\x5b\xad\x96\xcb\xd1\x6a\x05\xcb\x25\xea\x62\xb5\x1a\x74\x99\x81\x7b\x61\x2b\xb7\xab\x62\xb0\x5c\x26\x85\xb4\x87\xd9\xe8\x58\x5a\x3a\xd5\x29\x39\x35\xef\x09\x81\xb4\x42\xfb\xab\xd5\x38\x28\x5c\x2e\xf9\x57\xcd\xe9\x3f\xe8\xdd\x88\xbf\xab\x9e\x27\xff\xc7\xf3\xb4\x3f\x4b\xfa\x0a\x9d\xff\x31\xf7\x07\x07\xf0\x00\xde\x02\x2d\x02\xfd\x7e\x87\xa4\xfb\x34\xd9\x41\xd1\x7f\x03\x00\x00\xff\xff\x14\x17\x4e\xb1\xfd\x0f\x00\x00"

func internalToolsGobuildShBytes() ([]byte, error) {
	return bindataRead(
		_internalToolsGobuildSh,
		"internal/tools/gobuild.sh",
	)
}

func internalToolsGobuildSh() (*asset, error) {
	bytes, err := internalToolsGobuildShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/tools/gobuild.sh", size: 4093, mode: os.FileMode(493), modTime: time.Unix(1534840966, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalToolsGperf_enumPl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\xeb\x6f\xdb\x36\x10\xff\x6c\xfe\x15\x57\xc5\x86\x25\xc7\x92\xe2\x6e\x1f\x06\xa8\x6e\x17\xa4\x5e\x31\xa0\x4d\x86\x3e\x07\x44\x8e\xc0\x48\xb4\x4d\x4c\xa6\x34\x92\x72\x12\xb8\xce\xdf\x3e\x1c\xa9\x87\x9d\x07\x86\xa2\x5f\x0c\xf2\xee\xf8\xbb\x87\xee\x77\xe7\xa3\x17\x61\xa5\x64\x78\xcd\x45\x58\x32\x99\x93\x23\x38\x2b\xca\x3b\xc9\x97\x2b\x0d\x2f\x4f\x26\xbf\xc1\xa7\x74\xc5\xaf\x95\x66\x19\x21\x95\x62\xa0\xb4\xe4\xa9\x8e\x08\x59\xdf\x41\x5f\x15\x95\x4c\x19\x4c\xc1\xed\x9f\x7e\x7c\xf7\xf5\xf2\x64\x0e\xec\x5f\x18\xfa\x6a\xe8\x45\x44\xad\xf8\x42\x03\x5f\x34\x66\xf5\x9b\xa2\xd2\x65\xa5\x61\x0a\x46\x1f\x91\x34\x2f\x14\x73\x3f\x7d\x7e\x7b\xf1\xe5\xb3\x17\x91\xa2\x64\xa2\xbe\x8d\x61\xf8\x7a\x38\x6e\x5e\x78\x50\x48\xc8\x38\x03\xe7\x8c\x8a\xa1\x06\x34\x6c\xd1\x16\x85\x84\x1b\xc9\x35\x17\x4b\x27\x22\xa4\x75\x72\x0f\xe1\x55\x30\x7a\xe3\x5e\x5e\xc5\xe1\xfc\xd8\x8b\x03\x3c\x05\xf3\x63\xaf\x1f\xb6\x70\xa9\x81\x2b\xa9\x54\x0c\xd8\xad\x66\x42\xf1\x42\xc0\x42\x16\xeb\x06\xde\x89\x4c\xe4\x82\xae\x31\xd7\xfe\xa4\xce\xa4\x94\x6c\xc1\x6f\x61\x0a\x55\x0a\xae\xd1\x7a\x11\x69\xa5\xf7\xa0\x42\xf7\xf2\x2a\x99\x7b\xf8\x33\x72\x93\xef\x7d\x2f\x8c\x27\xe1\xb2\xb3\x09\xa6\x30\x4c\x86\x11\x21\xa5\xe4\x42\x83\xa3\xb4\xac\x52\x0d\xfd\x2d\x62\xed\x12\xc9\xd2\x28\x16\x4e\xd4\xa8\x99\xa8\xd6\x75\x14\xdb\x58\xc4\x3a\xd6\xfd\xad\x45\xda\x9d\x5f\x9c\xcf\x9c\x3a\xac\x8c\xa5\x79\xc2\x6e\xb5\xa4\x26\xec\xdf\x17\x9c\xe5\x99\xb2\xe7\x4e\xdc\x47\xb0\x29\x9c\xd8\x8b\xd2\x54\x6a\x96\x75\x82\xfc\x40\x2d\x8a\x94\x2a\x16\x91\x9b\x15\xcf\x19\xb8\xaf\x5e\x7b\xb0\x25\xbd\x74\x55\xac\xcb\x88\xf4\x8c\xf1\xf1\x71\x44\x48\x0f\x8d\x8d\xbf\xc8\x9e\x6b\x7f\xe6\xbc\xa1\x79\x65\xea\x87\xe6\x68\xcc\x17\xe0\xd6\xbd\x61\xf0\x8c\xe0\x45\x13\x8b\x15\xf5\xf6\x42\x9b\x60\x33\x85\xef\xfe\x9a\x7d\xfc\x23\x99\x9d\x7f\xf9\xe0\x26\xe7\x17\x67\xa7\x9f\x66\xde\x9b\xd8\x96\xdf\x8d\xdc\x60\xe4\x79\x6f\x62\x2f\x8c\xcc\x5b\x1b\x37\x4c\xc1\x19\xf0\xa5\x28\x24\xf3\xf1\xee\x98\xa6\x9c\x80\x60\x30\x1c\x5a\xc3\xae\x66\x18\xe0\x2f\x8f\x84\xf8\xa5\xa2\xa1\x79\xb7\x27\x7d\x71\x0f\x61\xd4\xb7\xbe\x04\xbb\xd5\x78\xd8\x91\x5e\x2f\xa7\x4a\x3f\x88\x35\xc4\x84\x4d\x82\xb5\x10\x03\x8f\x5d\xc7\xc5\x86\x8c\x9d\xf9\xf7\x38\x0e\xbc\x91\xe7\xb8\x97\x57\xde\x7c\xe4\x85\x4d\xf6\xa6\x98\x75\xd3\xe1\xfd\x30\xc6\x1d\xb0\x5c\x3d\x00\x4d\xbe\x9e\xbe\xff\x32\x8b\x11\x78\x3c\x3f\xf6\xc6\xf0\xbf\x3e\xda\x0f\x53\xfb\x68\x7d\xbe\x7c\xe0\xf3\xd7\xd6\x27\xb3\x4f\xf7\x92\xde\x13\x77\x00\x09\x2a\xdb\xf7\xa6\xd8\x3b\x42\x7a\x65\xa5\x56\x4d\x5f\x8e\xbb\x86\xb1\x62\x63\x3d\xee\x5a\xa7\x45\xab\x52\xd7\x9e\xbd\x3d\xe9\x3d\x68\x19\xfa\x61\x82\x1f\xa1\xa6\xc9\xb8\x61\xa6\x03\x41\x0d\x0e\x01\x38\x18\x8f\xc9\xd4\xc1\xe7\x75\xc7\xee\x1a\xee\xbd\x7a\x35\xbb\xf8\x4c\x76\x11\x79\xcc\x41\xd3\xea\x85\x50\x1a\xd2\x15\x95\x30\x42\x45\x44\x7a\x96\x8d\xd6\x0c\x36\x34\x47\xd4\xae\x37\x10\x8a\xc4\x03\x8b\xe6\xeb\xbb\x92\x91\x78\x90\xb1\x05\x17\x0c\x56\x54\xad\xfc\x45\x25\x52\xcd\x0b\xe1\x1b\x3e\x37\xee\x50\xd5\x19\xe6\x45\xf1\x4f\x55\x3e\x63\x6a\x95\x24\x1e\x48\x46\xb3\x42\xe4\x77\xbe\xa6\xd7\x39\x53\xb1\x20\xf1\x00\x83\x23\xf1\x20\x2d\xd6\x25\x95\xcc\x57\x5a\x8a\x74\x5d\x76\xc8\x38\xc5\xc5\xd2\x2f\x8b\x22\x3f\x44\xb5\x0a\xd5\x59\xde\x14\x32\xf3\xa9\x94\xf4\xee\xd0\x10\xe5\x8a\xd4\x0c\x23\x64\xb0\x25\x58\xc0\x76\x56\x1d\xd5\xcf\x3f\x9c\xfe\x9d\xb4\x53\xea\xdb\xc5\xc7\xb7\x66\xf0\xc4\xc2\x70\x10\xc9\x6e\xe9\x1f\x1d\x7c\x06\x72\xc4\x17\x22\x63\x0b\x90\x6c\xc9\x95\x66\x92\x34\x70\x9d\x80\x89\x8c\x2f\x08\x39\x2a\x25\x5d\xae\x29\xbc\x3b\x3b\x83\x8c\xd3\xa5\x28\x94\xe6\x29\x60\x2b\x3d\xa7\xb3\x93\x20\x03\xc7\xff\xb6\xe6\x4a\x61\x1d\xf0\xbb\x51\x49\xb1\xc8\xca\x41\xef\x60\xfd\x65\x90\x24\x69\x4e\xc5\x32\x49\x5a\x34\x73\x7f\xd6\xd7\x23\xed\x9e\x37\xa5\xa9\xe6\xa9\xcf\x85\xcf\x45\xce\x05\x73\xda\x2c\x06\xbb\xba\x7a\x4d\xf9\xe2\x41\x3c\x30\xa3\x9f\xe0\x66\xc3\xe9\xc9\xc1\x3d\x81\x20\x80\xfe\x91\xe5\x8d\x21\xaf\x19\xab\xfb\xd4\x50\x97\x7d\x3e\x37\xfc\xd8\x3c\xc5\x8d\x3d\x23\xa4\xc4\x21\x53\x36\xf8\x63\x9a\xb7\xd1\x9b\x08\x1e\x50\x04\x23\x23\xc4\xa6\x42\xf6\x36\x92\x6d\xc7\xc4\x5e\xdc\x7d\xbe\x28\x2d\xc7\x80\x00\x39\x13\x1e\x24\x09\xd5\x5a\xf2\xeb\x4a\xb3\x24\x71\xdd\x4a\x54\x8a\x65\x9e\x17\xfd\x0c\xe6\xd6\xee\x92\x9c\x09\x98\x4e\xc1\x9f\x78\x38\x83\xf1\x82\x7d\x8e\x07\x57\x69\x89\x55\xb1\x10\x4f\x50\x7c\xb4\xa1\x39\x0e\x88\x03\x6e\x99\x67\x63\xe3\xa2\x59\x57\x1b\x9a\x23\xb8\x64\xba\x92\x02\x59\xef\xbf\xb6\xd4\xaf\x25\x07\x0b\xd9\xd4\xae\xce\xca\xc4\x5a\xa7\x53\x3b\x41\xd1\xcf\x14\xea\xc7\x21\xb7\x6d\x9c\x2e\x17\xda\x3b\x2c\xef\x5e\xae\x3b\xf2\xc3\x1c\x28\xca\xa6\x99\x9f\x63\x64\x51\x36\x3d\xfe\x70\xef\x3f\x49\xfd\x6e\x75\xb6\xe4\xdf\xdb\xfc\xb7\xde\x13\xd2\xfa\xef\xc0\x63\xa5\x91\x06\x41\x80\x45\x7d\xff\xe7\xf9\x0c\x33\x79\x64\x60\xf7\xa6\xbb\x19\x83\xb1\x74\x37\x4f\xa1\x24\xf8\x5d\xe1\xa4\xc9\x15\x23\xee\x61\xbd\x22\xf2\x5f\x00\x00\x00\xff\xff\xad\x4c\xc9\xd1\x48\x0b\x00\x00"

func internalToolsGperf_enumPlBytes() ([]byte, error) {
	return bindataRead(
		_internalToolsGperf_enumPl,
		"internal/tools/gperf_enum.pl",
	)
}

func internalToolsGperf_enumPl() (*asset, error) {
	bytes, err := internalToolsGperf_enumPlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/tools/gperf_enum.pl", size: 2888, mode: os.FileMode(493), modTime: time.Unix(1534840966, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalToolsHeaderInstallSh = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xca\x21\x13\x82\x30\x18\x06\xe0\xfe\xfd\x8a\xd7\x77\xab\x1e\x8e\x64\x81\x62\xa2\x40\x10\x1a\x45\xe6\x74\xdf\x9d\x82\x07\x0b\xfa\xef\x3d\xca\xf2\xf3\x98\x43\x31\xe9\x5c\x6c\x51\x0c\x2e\xcb\xe7\xb7\xea\x33\x26\x94\x27\x77\xc6\xd5\x47\x9d\xb6\x14\xee\x22\x4d\x5b\xd1\x3a\x4a\x37\xf4\x15\x6d\x49\x91\xf5\x8d\xe3\x03\xb4\xdd\xd0\x53\x82\x8f\x0b\x68\xf0\xd2\x39\xc0\x61\xa4\x6d\xda\x91\x44\x9d\xc3\x37\x78\xf8\x5b\xc2\x2e\x44\x9d\xe1\x1f\x00\x00\xff\xff\x91\xb0\x66\xd1\x7f\x00\x00\x00"

func internalToolsHeaderInstallShBytes() ([]byte, error) {
	return bindataRead(
		_internalToolsHeaderInstallSh,
		"internal/tools/header-install.sh",
	)
}

func internalToolsHeaderInstallSh() (*asset, error) {
	bytes, err := internalToolsHeaderInstallShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/tools/header-install.sh", size: 127, mode: os.FileMode(493), modTime: time.Unix(1534840966, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalToolsInPl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x94\xd1\x73\x9b\x46\x10\xc6\x9f\xe1\xaf\xf8\x84\x21\x02\x5b\xd2\x59\x79\x6a\x2a\xa3\x56\xad\x52\x57\x33\x1d\x65\x26\x96\x3b\xd3\x38\xae\x06\xc1\x22\x5d\x07\xdd\x29\xdc\x11\xd5\x75\xc8\xdf\xde\xb9\x03\x24\xfb\x89\xe1\xbb\x6f\xf7\xf6\xb7\xec\x72\xd1\x63\x95\x2a\xd9\x86\x0b\x76\xa0\xb2\x70\x2f\xf0\xab\x3c\x3c\x95\x7c\xbb\xd3\x78\x7b\x3d\xfe\x01\x77\xe9\x8e\x6f\x94\xa6\xcc\x75\x2b\x45\x50\xba\xe4\xa9\x9e\xb8\xee\xfe\x09\x81\xaa\x36\x88\x11\x46\x13\xf3\xe6\xa7\x52\xe4\x39\x2f\x08\x31\xd4\x8e\xe7\x7a\xe2\xf2\x1c\xe1\x49\x8e\xf0\xec\x3a\xf2\x40\x02\x9d\x79\x00\xef\xc6\x1b\xbc\x08\x94\x25\x32\x4e\xf0\xac\xeb\x24\xff\x08\xbf\xe7\x4d\x5c\xe7\xb8\x33\x9e\xf0\xc6\x1e\x4c\x11\x7f\x07\x0b\x1f\x92\xe1\x7f\xeb\xd9\xf0\xd3\xf5\xf0\xdd\xe3\x55\x14\x87\xa3\xcb\x88\xd9\x8b\x1c\x5f\x55\x9b\x67\x7f\x5c\x23\x86\xff\x76\xe2\x3a\xb5\xeb\xa4\x85\x54\xd4\xe4\x9d\xb8\xb5\x45\xf0\xb9\x30\x57\x34\x00\xb2\xd2\xcd\x4b\xf3\x56\x64\xb2\xd2\x88\xe1\x79\xcd\xb1\xa0\xe3\x59\xb0\xca\x62\x39\x71\x1b\xc8\x26\x4d\x47\x7e\x46\xf5\x17\xcb\x8e\xb2\xb5\xbc\x66\x6c\xc4\x8e\xb0\xab\xa0\xcb\xd3\x99\xfd\x9e\x3d\xec\x0a\xca\x24\x9e\x51\xc8\x34\x29\xc2\x9f\x67\x1f\x6f\xff\x1c\xc0\x67\x91\xe1\xec\x00\x70\x33\x45\x0d\x9e\x63\x48\x2f\xa8\x6a\x50\xa1\xc8\x94\xe6\x2f\x96\x88\x71\x79\xb7\x9a\x1b\x82\xb6\x13\x24\x32\xc4\xe8\xf7\x27\xee\xa9\xd1\x8b\xe5\xd4\xa2\x28\x16\xd8\x76\xf6\x7f\xb9\x5f\xfc\x31\x5f\xdf\xad\x66\xb7\xef\xfb\xb5\x79\x7e\x5c\x05\x9f\x05\x63\x13\xeb\x99\x2d\xff\x7a\xa5\xb9\x0e\x0b\xc2\x87\xd9\xf0\xd3\xe3\x55\x74\x3e\x40\x22\xb2\xee\x36\x7f\xdc\x44\xfa\xcf\x24\xb2\x7a\xfd\x7e\x39\xb7\xa1\x2f\x2d\xa6\x20\x47\xd0\xbf\xda\xf0\x18\xcd\xe4\x55\x2c\x68\xf2\x9e\x42\x8c\x6a\x28\x4a\x52\x5d\xd0\x05\x7e\x93\x25\xe8\x2b\x95\x4f\x50\xb4\xdd\x93\xd0\xd0\xbb\x44\x23\x93\xa4\x44\x5f\x23\x95\x42\x27\x5c\x20\x41\x3f\xe8\x63\x34\x1a\x9d\x66\x6c\xcf\x3e\xdf\x86\x0f\x7f\x07\x8f\x97\x11\xdb\xab\x6d\xda\x8e\x94\x49\x3e\x6a\xab\x76\x2e\xb0\xc8\x71\x34\xf9\x72\x59\x14\xf2\xa8\xd0\x54\xa9\xda\x7c\x8b\xb9\x7d\x28\xfa\x52\x91\x48\x69\x00\xbd\x23\x01\x59\xe9\x43\x65\xea\x20\xa8\x6a\xa3\x34\xd7\x95\xe6\x52\x20\x97\xa5\x15\x17\xf3\x91\xeb\x38\x66\xa6\x4c\x0d\x81\x1d\x70\x43\xda\x3e\xaf\x87\xef\xd6\x8f\x97\x3f\x45\x01\xdb\xa6\x78\xf3\x06\x19\xe5\x5c\x50\x06\x7f\xdc\x94\xe8\xd8\xd9\xaa\x44\xa7\x7f\x4d\x4a\x9e\x6c\x0a\xc2\xd4\x1f\xdf\x60\x38\x85\xbf\xf6\x4c\x23\xc3\xde\x29\xb2\xdd\x93\xc8\x30\x9d\x11\x5b\xd5\x88\x76\x6e\xba\x8a\xc2\xe0\x2a\x62\x5d\x43\xda\x1e\x10\x14\x11\xa4\xb0\xc3\xbd\x97\x25\x59\xf0\xc4\x50\x72\x85\x83\xe4\x42\x0f\xf0\x4f\xa5\x34\x92\x2c\x33\x94\x7b\x68\x69\x69\x9b\x6e\x8c\x5e\xdd\x6c\x9b\x5b\x9b\x85\x35\x9f\xf0\xf7\x44\x64\x05\x59\x73\x3f\x93\xd5\xa6\xa0\x21\xa9\x34\x39\x50\x1f\xc7\x1d\x4f\x77\xa6\xdf\x4a\xee\x49\xf3\x3d\x29\x54\x8a\x32\x70\x61\xed\x47\x5e\x64\x23\xb7\xc9\x1b\x7f\x87\x62\x41\xc0\x02\xb6\x35\x83\xd2\xad\xb2\xb9\xae\x24\x65\x57\xc0\xae\x71\xbb\x2b\x96\xae\x11\x9a\x9d\xa3\x2f\xf0\x3c\x7c\xfb\x86\xde\x4b\xa9\x4d\x13\x35\xcd\x38\xfd\xda\x3e\xdc\xaf\x06\xf0\xa6\x66\xe7\x4f\xbb\xe7\x38\x87\x92\x0b\x6d\x0f\xbb\x38\xa3\xb6\xbf\xa4\x0f\xf7\x2b\xfb\x8b\x3a\xaf\x68\x6b\xef\x9c\xb5\xfb\x7f\x00\x00\x00\xff\xff\x97\x33\x24\x2f\xa9\x05\x00\x00"

func internalToolsInPlBytes() ([]byte, error) {
	return bindataRead(
		_internalToolsInPl,
		"internal/tools/in.pl",
	)
}

func internalToolsInPl() (*asset, error) {
	bytes, err := internalToolsInPlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/tools/in.pl", size: 1449, mode: os.FileMode(493), modTime: time.Unix(1534840966, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalToolsLinkPl = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\x90\x51\x6b\x1b\x31\x10\x84\x9f\x6f\x7f\xc5\xd4\x36\xf5\x99\x5e\xac\x3a\x4f\x25\x97\x04\x97\x42\x4d\x5f\x52\x68\x9a\x52\x08\xa9\x73\x39\xad\x73\x4a\x65\x49\x68\x75\xe7\x98\x92\xfe\xf6\x20\xc7\x8f\xfb\x31\x33\xcc\xce\xf8\x9d\xea\x25\xaa\x07\xe3\x14\xbb\x01\x81\xa3\xa5\x31\xbe\xf8\xb0\x8f\xe6\xb1\x4b\x38\xfd\xb8\xf8\x84\xeb\xb6\x33\x0f\x92\x58\x13\x8d\xf1\xb3\x33\x82\x5d\x6c\x42\xe0\x88\x9d\xb1\x16\xa1\x89\xc2\x88\x12\xb0\x31\x96\x05\x1b\x1f\xe1\xbc\x3b\x59\x5d\xdd\xc0\x6a\x0c\x1c\xc5\x78\x27\x73\x1a\xe3\x88\xa4\x0f\xc1\xc7\x24\x48\x1d\x6f\xe1\x9a\x64\x06\xb6\x7b\x34\x4e\x63\xc7\x78\xea\x25\x81\x9f\xb9\x85\x49\x30\x9b\x8c\x34\x27\x6e\x53\xb6\xcf\x89\x7a\x61\x48\x8a\xa6\x4d\x35\xd1\x76\x8f\x89\xd5\xeb\x01\x17\xb8\xb7\x1a\x27\x03\x4e\x2f\xdf\x2f\xee\x6b\x3a\x04\x2c\x3f\xff\x58\xfd\xca\x19\x47\xcd\x7f\xa8\xd5\xd5\x8d\x7a\xf3\x2d\x9b\xf8\x28\xb8\x40\x39\xab\x89\x72\xe9\xf2\x20\x9f\xe1\x1f\x15\x6a\x1e\x25\x4c\xd4\xa1\x92\xf6\x99\x14\xa2\xfe\x2c\x95\xaa\xa9\x28\xc6\xf8\x36\x1d\x18\xd2\xb7\x2d\x8b\x6c\x7a\x6b\xf7\x08\x8d\x08\x6b\xf8\x81\x23\x16\x2b\xf8\x0d\x5a\xbf\xdd\x66\xbb\x35\x8e\xe1\x1d\xbe\x5f\xe3\x77\x05\xf1\x48\x79\x41\xe9\x7c\x6f\x35\x76\x3e\xfe\x9d\x53\x51\xf8\xc0\xae\xcc\xbf\x44\x09\x15\xa6\xe7\xd3\x0a\x93\xf5\x0c\x3e\x42\x1b\xc6\xe8\x6b\x63\x2c\x6b\x24\x8f\x2c\xc4\x64\x3d\xca\x3d\x42\x2f\xdd\xdb\x8b\x15\x24\x58\x93\x4a\x75\x7b\x7b\x26\xa1\x69\xf9\xec\xee\xee\x83\xaa\xf0\xe4\x8d\x2b\x47\x18\x55\x38\xcf\xc9\x97\xb3\x59\xf6\xb5\xd6\x0b\x97\x19\x1c\x4e\xc7\xcf\xa9\xa6\xe2\xa5\x26\x3a\x46\xe6\x61\x72\x81\x9a\x5e\xe8\x38\x64\x46\x35\xbd\x06\x00\x00\xff\xff\xff\x31\x80\x4d\x2f\x02\x00\x00"

func internalToolsLinkPlBytes() ([]byte, error) {
	return bindataRead(
		_internalToolsLinkPl,
		"internal/tools/link.pl",
	)
}

func internalToolsLinkPl() (*asset, error) {
	bytes, err := internalToolsLinkPlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/tools/link.pl", size: 559, mode: os.FileMode(493), modTime: time.Unix(1534840966, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalToolsPythonInstallSh = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8d\xbb\x4a\xc0\x40\x14\x44\xfb\xfb\x15\x93\x9b\x25\x68\xb1\xe4\x61\x10\x9b\xa0\x60\x63\x65\x04\x6d\xac\x24\x8f\xd5\x5d\xc8\x3e\xc8\x2e\x62\x20\x1f\x2f\x31\x8d\xa0\xed\x9c\x33\x33\x79\x56\x8e\xc6\x95\x51\x53\x8e\x7b\x1f\xb6\xd5\x7c\xe8\x84\xa6\xaa\x6f\xf0\x3c\x69\x33\xc6\xa4\x66\xa2\xa7\xd7\x97\x87\xfe\xb1\x63\x71\x31\x79\x6b\x07\x37\x43\x7e\x22\x6c\x49\x7b\x77\x85\x7d\xc7\x9f\xf4\x92\x89\x8c\x8b\x69\x58\x16\x48\x5b\x5d\xb7\x2d\x58\xdc\xf1\xe1\xaa\x2f\x93\x50\x13\xb1\x38\x57\x19\xd2\x22\x6c\x6f\x93\xb7\xc1\x2c\x0a\x2c\x1a\x46\x51\xe0\x17\xef\xff\x51\x28\x76\xe2\x96\x92\x8a\x09\x22\x22\xeb\x50\x1d\xa5\xd5\x42\xbe\x9f\xfc\xe7\x47\x44\xfa\x0e\x00\x00\xff\xff\xd6\x4b\x40\xa8\xe2\x00\x00\x00"

func internalToolsPythonInstallShBytes() ([]byte, error) {
	return bindataRead(
		_internalToolsPythonInstallSh,
		"internal/tools/python-install.sh",
	)
}

func internalToolsPythonInstallSh() (*asset, error) {
	bytes, err := internalToolsPythonInstallShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/tools/python-install.sh", size: 226, mode: os.FileMode(493), modTime: time.Unix(1534840966, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalToolsRonn_wrapperSh = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\x41\x6b\xf2\x40\x10\x86\xcf\xce\xaf\x98\x2f\xee\xf1\x5b\x52\x6d\x0f\xc5\x12\x21\x58\x5b\x04\x1b\xc1\xd8\x4b\x6f\x6b\x32\x49\x06\x92\xd9\xb0\xbb\x0a\xad\xf8\xdf\x4b\x9b\x50\xbc\x0d\x33\xc3\xfb\x3e\xcf\xf4\x5f\x7c\x64\x89\x8f\xc6\x37\x30\xc5\x95\xed\x3f\x1d\xd7\x4d\xc0\xf9\xdd\xec\x11\xf3\xa2\xe1\xa3\x0f\x54\x02\xe4\xfb\xd5\xcb\x66\xbb\x4e\xd4\x0c\x9e\xf3\xc3\x30\xce\x61\xb7\x7f\x4d\xb3\xcd\x47\x7a\xd8\xec\xb2\x44\x5d\xee\x17\x3a\x27\xe3\x8a\x06\xd7\x52\xb3\x10\x39\x96\xfa\x0a\x6f\x69\xf6\x9e\x6e\x13\x75\x79\x58\xe8\xbf\x48\x1c\x3e\xaf\xb0\xdf\x65\x59\xe2\xac\x08\x00\x57\x58\xd8\xae\x33\x52\xa2\x3e\xa3\xfa\xb9\xe0\x32\x2e\xe9\x1c\xcb\xa9\x6d\x9f\x30\x34\x24\x30\x19\xf6\x5a\xf7\xdc\x13\x6a\xed\x6c\x55\xa1\xd6\xd6\xd5\x46\xf8\xcb\x04\xb6\x92\x44\xea\x96\x2c\x42\xad\x3b\x23\x27\xd3\x26\x91\x1a\x60\x22\x54\xa3\x11\x2e\x51\x8d\x46\x40\xad\x27\x98\x50\xd1\xd8\xb1\x5c\x6c\x40\x16\x1f\x4c\xdb\x52\xf9\x1f\x3b\xf6\x9e\xa5\xc6\xce\x48\x6f\x6a\xba\xc9\xf8\x85\xf4\xa1\x24\xe7\xa0\x62\xf8\x0e\x00\x00\xff\xff\x1d\x08\xe1\xbc\x56\x01\x00\x00"

func internalToolsRonn_wrapperShBytes() ([]byte, error) {
	return bindataRead(
		_internalToolsRonn_wrapperSh,
		"internal/tools/ronn_wrapper.sh",
	)
}

func internalToolsRonn_wrapperSh() (*asset, error) {
	bytes, err := internalToolsRonn_wrapperShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/tools/ronn_wrapper.sh", size: 342, mode: os.FileMode(493), modTime: time.Unix(1534840966, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _internalToolsSwig_headerSh = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x90\xc1\x6e\xdb\x30\x0c\x86\xcf\xe5\x53\xfc\xab\x35\x64\x1b\x96\xa4\xc9\x69\x97\x00\x1b\x86\x1d\x7a\x58\x7a\xa8\x7b\x8f\x62\xd3\x16\x97\x58\x32\x28\x39\x9e\xd1\xf6\xdd\x07\xb9\x03\xd2\x9b\xc0\x9f\xfa\xf8\x91\xc5\x87\xf5\x51\xfc\x3a\x3a\x2a\xf0\x33\xf4\x93\x4a\xeb\x12\xb6\x77\x9b\x6f\x78\xac\x9c\x1c\x63\xe2\x9a\xa8\x40\xe9\x24\x22\x56\x2a\x7d\x82\x44\x78\xae\x38\x46\xab\x13\x8e\x5c\xd9\x21\x32\x92\x63\xe5\x39\x0a\x18\xed\x84\x14\x50\x05\x7f\x11\x5f\x31\xe2\x28\x2d\x15\xb9\x14\x86\xd4\x0f\x29\x37\xa3\x0b\xf5\x70\x66\x34\x72\x66\x8c\x92\x1c\xac\x0f\x19\x32\x57\xbc\xed\x78\x85\xc7\x80\x91\x51\x29\xdb\xc4\xb0\x99\xc0\x5d\x1f\x34\x8f\xad\x45\xb9\x4a\x41\x27\x84\x06\x7f\x06\x7f\xfa\x8a\x96\x3d\x6b\xee\xe4\x0b\xeb\x94\x9c\xf8\x16\xe2\xff\x8b\x59\x5f\xe7\x97\xa7\x02\x3a\xd3\x61\xdf\x6d\xb1\x22\x2a\x77\x87\xee\x94\xf9\x58\xd6\x07\x6a\xac\x9c\x3f\x7d\xc6\x33\xdd\x68\x87\xa5\x36\x30\x25\xdd\xf0\x5f\x49\xd8\xd0\x2b\xd1\xfd\x7e\x67\x36\xf4\xf0\x54\xee\xcc\x96\xa2\x93\x26\x61\x4b\xb4\xff\xf1\xfb\xd7\xee\xd0\x2a\xf7\x58\x7c\x7c\x5b\x6f\x01\x73\xbf\xc7\x0b\xec\x78\xc2\xe2\xb9\x57\xf1\x09\x66\xfb\xba\x38\x10\xe5\xa3\xe0\xd6\x7c\xbf\xc5\x32\x0c\xa9\x16\x85\x29\xb1\x0c\x30\xe5\xba\xb5\x7a\xb4\x2d\xbf\xfd\x7d\x41\x96\x21\xea\x2e\x39\x32\x79\xc8\xea\x0b\xcc\xc3\x53\x79\xcd\xae\x92\xb3\xe3\x1d\xfd\x0b\x00\x00\xff\xff\xb8\xfc\x9b\xc6\xd7\x01\x00\x00"

func internalToolsSwig_headerShBytes() ([]byte, error) {
	return bindataRead(
		_internalToolsSwig_headerSh,
		"internal/tools/swig_header.sh",
	)
}

func internalToolsSwig_headerSh() (*asset, error) {
	bytes, err := internalToolsSwig_headerShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "internal/tools/swig_header.sh", size: 471, mode: os.FileMode(493), modTime: time.Unix(1534840966, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rulesCompilerClangNinja = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xcd\x31\xae\xc2\x30\x10\x84\xe1\xde\xa7\x18\x29\xb5\x9f\x1e\x54\x34\x34\x70\x04\x90\x28\xa3\x8d\xbd\xc4\x2b\x99\x75\xf0\x3a\x44\xb9\x3d\x0a\x69\x7f\xcd\xe8\xeb\x70\x2d\xd3\x5a\x65\x4c\x0d\xc7\xff\xc3\x09\xb7\x90\x64\xb0\xc6\xd1\xb9\x85\xaa\x86\xf2\x9a\x24\x73\x3d\xfb\x87\x16\x3f\x51\x65\x6d\x89\x8d\xcd\xf3\x7b\xa6\x2c\x6d\x75\xae\xc3\x3d\x89\xe1\x43\x55\x68\xc8\x8c\x40\x8a\x81\x31\x1b\x47\x88\xe2\x32\x4b\x8e\x91\x2d\x18\x5a\x41\x14\xfb\x8d\xda\x76\xd9\x04\xd1\xf1\xcf\x2d\xbd\x96\xde\x38\x3f\x7b\x32\x93\x51\x77\x6e\x0b\x7e\x0f\xee\x1b\x00\x00\xff\xff\xc8\x01\xa3\xc6\xa9\x00\x00\x00"

func rulesCompilerClangNinjaBytes() ([]byte, error) {
	return bindataRead(
		_rulesCompilerClangNinja,
		"rules/compiler/clang.ninja",
	)
}

func rulesCompilerClangNinja() (*asset, error) {
	bytes, err := rulesCompilerClangNinjaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules/compiler/clang.ninja", size: 169, mode: os.FileMode(420), modTime: time.Unix(1534840966, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rulesCompilerGccNinja = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcb\x31\x0e\xc2\x30\x0c\x05\xd0\x3d\xa7\xf8\x52\xe7\x22\x60\x62\x61\xe2\x08\x0c\xcc\xc5\x0d\x69\x24\x93\x6f\xd9\x46\xa8\xb7\x67\xe5\x00\x6f\xc2\x8d\xb6\x7b\x6f\x5b\xe2\x7c\x3c\x5d\x70\x97\xad\x3f\x23\xeb\x5a\xca\x04\xd1\x65\x34\xac\xac\x81\xc1\x44\x7c\xcc\xe8\x89\xf9\xa1\x6c\x5d\x16\x9d\x69\x08\x82\x43\x77\x44\x4d\xf4\xc4\x8b\x8e\x26\x72\x28\xdf\xc5\x87\xf0\x6d\x5d\xab\x5f\xff\x45\xf9\x05\x00\x00\xff\xff\xab\xaa\x4a\x08\x74\x00\x00\x00"

func rulesCompilerGccNinjaBytes() ([]byte, error) {
	return bindataRead(
		_rulesCompilerGccNinja,
		"rules/compiler/gcc.ninja",
	)
}

func rulesCompilerGccNinja() (*asset, error) {
	bytes, err := rulesCompilerGccNinjaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules/compiler/gcc.ninja", size: 116, mode: os.FileMode(420), modTime: time.Unix(1534840966, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rulesCompilerFlavorGitkeep = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00"

func rulesCompilerFlavorGitkeepBytes() ([]byte, error) {
	return bindataRead(
		_rulesCompilerFlavorGitkeep,
		"rules/compiler-flavor/.gitkeep",
	)
}

func rulesCompilerFlavorGitkeep() (*asset, error) {
	bytes, err := rulesCompilerFlavorGitkeepBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules/compiler-flavor/.gitkeep", size: 0, mode: os.FileMode(420), modTime: time.Unix(1534840966, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rulesDefaultsNinja = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x91\x41\x8b\xdb\x40\x0c\x85\xef\xfe\x15\x82\x14\x7a\xa9\x42\xbb\xa7\x5e\x72\xda\x94\xde\xba\xd0\xb0\xb8\xb7\xa0\xcc\xc8\xb6\xc8\x64\x64\x24\xd9\x89\xfb\xeb\x8b\x77\xd3\x2d\x0b\xbd\x09\xe9\xcd\x7b\xdf\x63\x36\xf0\xa8\xe3\x62\xd2\x0f\x01\x0f\x9f\xbf\x7c\x85\x43\x1a\xe4\xe4\xc1\xb9\x69\x36\xb0\xe7\x8e\xa6\x12\x30\x53\x99\xd8\xa1\x53\x83\x99\x4c\xe8\x54\xd8\x41\xbb\xe0\x0a\x3a\xb3\x99\xe4\xcc\x15\x4e\x0b\x74\x85\x66\x35\x50\x83\xa4\x97\x51\x0a\x1b\xd8\x54\xb8\xd9\x40\x27\x85\x7d\xdb\xa4\xae\x50\xef\x3b\xec\x01\x47\x19\x19\xf0\xe9\x01\x70\x7f\xfc\xfe\xe3\xf9\x78\x78\x7a\xfe\xf9\xf8\x0d\xb0\x9b\xc5\xe5\x24\x45\x62\xd9\x0d\xaf\xce\xd8\x79\x50\x3a\xe3\x68\x1a\x9c\x42\xad\xd9\xc0\x87\x2b\x59\x7d\x4b\xc9\xca\x5e\x3f\x06\x18\x53\x29\x0b\x5c\xd5\xce\x30\xb0\x31\x90\x43\x0c\xfc\x1e\xe7\x05\x06\xc4\x41\x6a\x2a\x53\xe6\xdc\x6c\x80\xba\x60\x83\x18\xc4\x41\x2b\x7f\x82\xd3\x14\x6f\xe7\xd5\x84\x2a\xf0\x8d\x2e\x63\xe1\x6d\x93\xd6\xe8\x7b\x91\x96\x4a\x01\x6c\x7d\xa0\xac\x57\xc0\xf6\x6a\x12\x8c\x1e\x26\xb5\x77\xc0\x76\x54\xa9\xc1\x86\x64\x12\x03\x60\x9b\xc8\x03\xa9\x48\x5f\xd7\x57\xd2\x57\x5c\xd1\xc8\x18\xb0\xed\xd4\x2e\x14\xe8\x9c\x26\x93\x58\x00\xdb\x8b\xb8\x4b\xed\x31\x73\x2a\x64\x14\xa2\xd5\xdf\x37\x6f\x92\xd6\xb2\xbc\xc2\x34\xe9\x76\xbb\x4f\x54\xa9\x2c\xce\x76\xbc\x63\xe2\xcb\xe2\x37\x03\xfe\xba\x4f\x06\x7f\x77\x86\x3a\xc5\x38\xc5\x6e\x88\x4b\xf9\xbf\x20\x8b\xaf\x9f\x8e\x69\xe0\x74\x5e\x2f\xff\x44\x99\x29\x27\xcd\xbc\xdd\x33\xe5\x43\xa8\xb1\x37\x7f\x02\x00\x00\xff\xff\xd0\x33\x8c\xc7\x56\x02\x00\x00"

func rulesDefaultsNinjaBytes() ([]byte, error) {
	return bindataRead(
		_rulesDefaultsNinja,
		"rules/defaults.ninja",
	)
}

func rulesDefaultsNinja() (*asset, error) {
	bytes, err := rulesDefaultsNinjaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules/defaults.ninja", size: 598, mode: os.FileMode(420), modTime: time.Unix(1534840966, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rulesFlavorDevNinja = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xce\xb1\x0a\xc2\x40\x0c\x00\xd0\xbd\x5f\x11\xd0\x35\xa0\x4e\x2e\x4e\x7e\x82\x43\xe6\x78\x4d\xef\x02\xd7\x4b\x49\x22\xa5\x7f\x2f\xfd\x80\x07\xef\x02\x6f\xdb\x0e\xd7\xda\x12\x1e\xb7\xfb\x13\x3e\xa5\xe9\x37\x52\xe6\x69\x2a\x3b\xfb\x58\x3a\xd7\x78\x21\x71\xef\x80\x24\xee\xe6\x80\x14\x8d\x67\xdb\x01\x69\x77\x4d\xc1\x48\xd7\x51\x03\x90\x36\xd3\x91\xe2\xc8\xae\xd9\x00\xa9\x70\x24\x72\xd7\x3a\x4e\xa5\x75\x60\xb1\x75\x63\x17\x40\x5a\xcc\x57\x4e\x0c\x29\x3f\xd7\x3c\x00\x69\xd5\x08\x1d\x15\x67\x29\x9d\x9d\x53\x6d\x04\x5c\xcf\xc6\xa9\xb4\x8b\x4f\xff\x00\x00\x00\xff\xff\x55\x2b\x36\x57\xb1\x00\x00\x00"

func rulesFlavorDevNinjaBytes() ([]byte, error) {
	return bindataRead(
		_rulesFlavorDevNinja,
		"rules/flavor/dev.ninja",
	)
}

func rulesFlavorDevNinja() (*asset, error) {
	bytes, err := rulesFlavorDevNinjaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules/flavor/dev.ninja", size: 177, mode: os.FileMode(420), modTime: time.Unix(1534840966, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rulesFlavorGcovNinja = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\x31\x6a\x34\x31\x0c\x46\xfb\x39\x85\x60\xff\x56\xf0\x27\x55\x9a\x2d\x42\x8e\x90\xc2\x65\xd0\xda\xb2\x47\xe0\xb5\x8c\xa4\xd9\x61\x6f\x1f\x9c\x5c\x20\xa5\xd0\x7b\x7c\xef\x02\x1f\x3a\x9f\x26\x6d\x0f\x78\xfd\xff\xf2\x06\x9f\x79\x97\x9b\x07\x97\x6d\xcb\x27\xd9\xa8\x9d\x9a\x5f\x31\x51\xef\x80\x89\xcd\xd4\x00\x93\xef\x54\xf4\x04\x4c\xa7\x49\x30\x7a\x98\x8c\xe6\x80\x69\xaa\x8c\x60\x43\x32\x89\x1d\x30\x65\xf2\x40\xea\xd2\xc6\xb2\xa4\x0d\xcc\x7a\x9f\x64\x0c\x98\xaa\xda\x9d\x02\x9d\xf3\x61\x12\x4f\xc0\x74\x17\x77\x19\x0d\x0b\xe7\x4e\x46\x21\x3a\x1c\xfe\xad\x8c\x65\x49\x67\xdb\x2e\xf0\x5e\x8a\xac\x0f\x75\xf8\x89\x83\xaa\x06\xb7\x43\x7a\x91\xd1\xe0\x5c\xbb\x2d\xeb\x03\xfc\x98\x53\x2d\xb6\x75\x7c\x65\x9d\xe1\x57\xac\xd3\xb4\x4a\x67\x24\xcb\x0e\x58\x83\x3d\x30\xeb\x83\x8d\x1a\xff\x92\xbd\xfc\x01\x05\xec\x0b\xde\xbe\x03\x00\x00\xff\xff\x04\x68\x59\x13\x3f\x01\x00\x00"

func rulesFlavorGcovNinjaBytes() ([]byte, error) {
	return bindataRead(
		_rulesFlavorGcovNinja,
		"rules/flavor/gcov.ninja",
	)
}

func rulesFlavorGcovNinja() (*asset, error) {
	bytes, err := rulesFlavorGcovNinjaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules/flavor/gcov.ninja", size: 319, mode: os.FileMode(420), modTime: time.Unix(1534840966, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rulesFlavorReleaseNinja = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcc\xbd\x0a\xc2\x30\x10\x00\xe0\x3d\x4f\x71\xe0\x7c\xa0\x9d\x5c\x3a\x55\x71\xb3\x60\x29\x8e\x25\xbd\xfc\x1d\x86\x26\xe4\x0e\xa5\x6f\xef\xd2\x17\xf8\x4e\x30\x94\xba\x37\x8e\x49\xa1\x3b\x5f\xae\x30\x51\xe2\x55\xd4\x3b\x63\x28\x64\x1b\xa5\xc7\x08\x58\xb9\x7a\xc0\xb1\x03\xbc\x2d\x8f\xe7\xbc\x4c\xe3\xfc\x1a\xee\x80\xe1\xcb\xc2\x2b\x67\xd6\xbd\x4f\xec\x9c\xdf\x00\x83\xa8\xa5\x0f\xd6\x56\xd4\x93\x96\x66\xe8\x67\xdb\x76\x58\x6f\x9b\xb3\xf9\x07\x00\x00\xff\xff\x27\x5a\x34\x2a\x75\x00\x00\x00"

func rulesFlavorReleaseNinjaBytes() ([]byte, error) {
	return bindataRead(
		_rulesFlavorReleaseNinja,
		"rules/flavor/release.ninja",
	)
}

func rulesFlavorReleaseNinja() (*asset, error) {
	bytes, err := rulesFlavorReleaseNinjaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules/flavor/release.ninja", size: 117, mode: os.FileMode(420), modTime: time.Unix(1534840966, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rulesRulesNinja = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x59\xe1\x6e\xdc\xb8\x11\xfe\xbf\x4f\x31\x58\x0b\x8e\x83\x1c\xd7\x71\x70\xb9\x16\x0d\x74\x68\xea\x34\x39\x17\xb1\x5d\xc4\x4e\xfb\x27\x80\x42\x51\x5c\x89\x31\x45\xaa\x24\x65\xaf\x0e\xf7\xf0\xc5\x50\x94\x56\xab\x5d\xef\xae\x63\xf8\xd0\x1e\x60\x78\x45\x6a\xf8\x71\xe6\x9b\xe1\x90\x43\x1d\xc0\xa9\xae\x1a\x23\xf2\xc2\xc1\xab\x97\x27\x7f\x86\x2b\x56\x88\xd4\x3a\x9e\x4d\x26\xa6\x96\x1c\xd8\x62\x31\x01\x00\x60\xba\x2c\xa9\xca\x20\x86\x88\x2d\x16\x10\x55\x82\xcd\x25\xcd\x21\x9a\x4b\x7a\xab\x4d\xe2\x5b\x16\xa2\xfe\x77\xb1\xe8\x9e\xee\xa8\x51\xe1\x39\x67\xfa\x36\x61\xba\x72\xd8\xdf\xfe\x58\xd3\x3e\x90\xb3\x19\x90\xb3\x48\x28\x96\x09\x03\xf8\x2b\xeb\x8c\x5b\x88\x32\x3e\x17\x8a\x5b\x20\xe7\xe7\xef\x80\x9c\xbf\x87\x48\xd7\x6e\x96\x01\x39\xbf\xf6\x8f\x40\x18\x8a\x03\xd1\xbe\xe9\xb5\xcd\x78\x35\x17\x92\xa3\xb6\x5e\x38\x74\x5a\x66\x44\xe5\x84\x56\x10\xc3\xe9\x8b\x17\x68\x54\x85\x62\x7e\x5c\xb0\x97\xad\x99\xcb\xf6\xb0\x56\x2b\xd9\xfc\x8f\xdb\xbb\xd1\xda\xc5\x22\xa1\x8a\xca\xc6\xf2\x91\xd9\xa6\x04\x62\xe6\xed\x84\x6f\xa0\xbc\x41\x25\x49\xd5\xb5\x99\xa4\x2a\x7f\xf1\x02\xa2\x30\xd8\x24\xc1\xe0\xdf\x3f\x2c\xd6\xa9\x18\x7b\x39\xe8\xb8\xea\xe5\xef\x37\xfb\x3b\x8c\x7e\x82\xe8\xd8\x61\xf6\xc8\xe8\xd0\x4a\x9c\xd6\x12\x83\x24\xad\x85\xcc\xb0\x91\x09\x73\x2c\x94\xe3\x46\x51\x79\x8c\x1d\xf6\x98\xe9\xaa\xe9\xd8\x99\x55\x32\x10\x36\xe8\x1c\x2f\x90\x15\x70\xcf\x54\x24\xd4\x26\xa5\x74\xd5\xf4\x7a\x39\x3d\xf4\xc7\x5c\x28\x2a\xf7\xc2\x27\x5e\x74\xdb\x34\xef\xbd\x40\x37\x8f\x50\x61\x1e\x29\xd4\x4d\x72\x67\x68\x55\x71\xb3\x8b\x02\x94\xed\x4d\xc7\xc6\x7a\x12\x5c\x81\x6b\x53\xa2\xcc\x82\x5f\x65\xd6\x3a\xd3\xfb\x37\x34\xc8\x47\x1c\x93\xfa\x78\xfa\x08\x91\x65\x25\xd3\xda\x64\x09\xd3\xca\x19\x91\x1e\x4b\x91\x76\xfe\x84\xbf\xfa\x45\x6c\x6c\x85\x50\x52\xa4\x76\x83\x95\x38\xff\xd2\xfb\xc6\xae\xac\x7f\x63\xab\x61\xb7\x9f\x84\x2b\x87\xaf\x85\x9a\x2c\xcd\xda\x61\x14\xfb\x7f\xb3\xa9\xa2\xc6\x09\x2a\x77\x9a\x26\x33\x20\x66\x5d\xb5\x0d\x2a\x75\x88\x8d\x57\x4e\xe0\xea\x7f\x84\x7e\xd4\x8c\xd4\xa2\x06\x98\xd9\x16\xcc\xd4\x80\x14\xa9\xa1\xa6\x59\x59\x2e\x92\xaf\x45\x24\xf6\x01\x79\x01\x44\x6f\x81\x43\x99\x01\x4e\x43\xd9\xfa\xfe\x9e\x0a\xab\x15\x90\x06\x48\x06\x84\x64\x3c\xad\xf3\x9e\xaa\xcd\xa8\x08\x33\x84\x15\xca\x3a\x2a\x25\x52\x30\x1f\x81\x87\x57\x40\xca\x97\x3f\xfd\xf8\xa3\xcf\x62\xf7\xa4\x30\xcc\x38\xfe\xfd\x6a\xa6\xe8\xb0\x5b\xd1\xfb\xd1\xff\xf4\xfa\xf5\x23\xd0\x0b\x4e\x33\x3e\x76\xd6\xd6\x94\xd1\x8e\x20\x01\x60\x66\x8b\x9d\xb3\xb7\x23\xee\x51\xa0\x6a\x1e\x32\x79\xd5\xb8\x42\xab\x3d\x27\x6f\x85\x77\x31\x50\x15\xd5\x48\x83\xaa\xa8\x80\x48\x3f\xe4\x67\x38\xce\xf8\xed\xb1\xaa\xa5\x84\xc3\xc3\x07\x38\x15\x31\x6c\xa3\x1c\x5d\x00\x2b\x38\xbb\x01\x84\xbe\x47\x13\xbf\xe5\xe4\xfa\x21\x3c\xe4\x7a\x4f\x0e\x72\x0d\xf3\xd2\xed\xa3\x83\x62\x74\x1c\x65\x8c\xba\xc0\xc2\xbd\xee\xc5\x51\x5c\x51\xc7\x57\x31\xf3\x8a\x9b\x79\xc2\x55\x5d\xee\xb4\xa4\x97\xec\xf7\xa1\x65\xd7\x98\x92\x01\xec\x96\x55\x3a\x92\x9a\x0c\x51\xed\x9d\x70\xac\xd8\x82\x4b\xec\x77\x42\x8f\x30\x7d\x1f\xee\x16\x6f\x2f\xae\xce\xc8\x29\x10\xa2\x6b\x57\xd5\x8e\x60\xce\x8c\x77\x4d\x31\x44\xf7\xec\x25\xb7\xdc\x58\xa1\xd5\x68\x16\xce\x0a\x0d\x5f\x0e\xda\xb3\x12\xfc\xed\xf3\xd9\xc7\x77\xc9\xbf\xfe\xfe\xe9\xea\xec\xf2\x02\xbe\x4c\x5b\xe2\xc3\xc8\x2f\xd3\xce\x8f\x2d\xac\xbd\x13\x79\xd2\x2e\x91\x21\x68\x8c\xfd\x40\xc2\xda\x21\xae\x30\x9c\x66\x16\xc8\xe5\x4a\x6a\x5c\x83\xd8\x90\x48\xe2\xad\x7e\xf7\x63\xdb\x41\xc3\x10\xde\x34\x73\xc7\x32\x57\xdc\x50\xc7\x13\x25\xd4\x37\x6a\x47\x4c\xb4\xb6\xb7\xff\xdf\x7f\xba\x3c\x4f\x2e\xce\x2e\xfe\xf1\x36\x3e\x81\xd3\xd3\x78\x1a\x31\x36\x6d\x25\xae\x2f\x2f\x3f\xbe\x3b\xfb\x14\x4f\x57\x94\x9b\x86\x18\x4d\xfc\x7f\x8f\x1c\x66\xd3\x26\x9e\x4c\x0e\xe0\x4a\x28\xc6\x71\x31\xa5\xb5\x14\x19\x98\x5a\xd9\x3e\x19\x64\xbc\xe2\x2a\xe3\x8a\x35\x50\x51\x76\x43\x73\x6e\xc1\x15\xbc\x01\x46\xd5\x33\x07\x29\x47\x71\x10\x6a\x72\x80\x9b\x2c\x95\x92\xcb\x1f\x00\x0f\xca\x40\xa5\xd4\x77\xa0\x15\x07\xea\x80\x82\x13\x25\x07\xdc\xb5\x4b\x9d\xf1\x19\xfc\x9b\x43\x41\x6f\x39\xd8\xda\x54\x46\x58\xa1\x72\xd9\x4c\x0e\xa0\xa4\xaa\xf1\x12\x76\x36\x99\x54\x78\x52\xcc\xb5\x57\xdb\x26\x95\xd1\x79\x57\x25\xb9\x02\x62\x38\xd9\x20\x40\x94\x66\x21\xd9\xdc\x27\x26\x45\xba\xf5\xbd\xe3\xd6\x6d\x15\x48\xb9\x0a\x8b\xec\x3e\x09\xa6\x6f\x43\xb4\x6c\x95\x48\x0a\x57\xca\x91\x58\x88\x06\xbd\xf4\xd5\x32\x0a\x3e\x5c\xfe\xf3\xed\xf5\x2f\xf1\x34\xca\x75\x45\x5d\x31\xdd\x95\x45\xfd\x5b\x8c\x3f\x3f\xe2\x26\x9f\xc2\x34\x12\x0a\xff\xeb\xda\xf9\x9f\xf4\x1b\x0e\x0c\x65\xe7\x14\xa6\xe4\x0c\x36\x14\x2b\x95\xa4\x6e\xae\x4d\x99\x74\x5d\x28\xb9\xc7\xa1\x31\x1c\x11\xa7\x10\xe5\x1a\x7d\x0a\x21\x2e\x31\x26\xd7\xea\xdd\x15\x55\x36\x64\x0e\x3f\x12\x4f\x6e\xb9\x06\xf4\xb4\xa1\x21\x4d\xce\x8d\x2e\xfb\x6c\x53\xb5\x95\x51\xcf\x73\x98\x79\x95\xd6\x2e\x02\x9e\x90\xd9\x25\xa5\x7d\x59\xf9\xfb\x71\x8b\x9b\xb9\x4e\xbf\xf9\xcd\x90\x10\xc3\x15\x2d\x39\xb1\x9c\x79\x26\x67\x42\x09\x97\x50\x63\x68\x13\xe7\x3a\xc1\x16\x10\x92\x4b\x9d\x52\x29\x7e\xe5\xc4\x36\x65\xaa\x65\x9c\x18\xf7\x32\xf9\x9a\x6b\xe0\xea\x16\x3e\x5c\xbe\xfd\x74\xfa\xcb\xd7\x41\xfb\xf2\xea\x2b\x2e\xa4\x60\xf0\xd8\x99\xfb\x79\x71\x78\x22\x7e\x98\x17\xfb\x25\xfa\x04\x1e\x6c\xff\x9e\xc8\x59\xa8\xf8\x86\x55\x30\x64\x08\x45\xba\x30\x6f\x13\xae\x2f\x7e\xef\x61\xc6\x33\xd1\x07\x77\x9f\x98\x9e\x86\x97\xc8\x4f\xe0\x2b\xc9\x11\x45\x8f\x26\xc6\x23\xef\x60\xc6\xcb\xec\x4f\x4d\xcb\x46\xc7\xcd\x32\x25\xff\x01\xf2\xa9\x37\xe6\x51\xd9\xb4\x8b\x32\x8f\x84\x44\xea\xf9\x9e\xb4\xb6\x44\xae\xd0\xba\xdc\xc7\x9e\x8e\xdb\x27\x26\xd3\x9b\xb0\x23\xfe\x7a\xae\x9c\x06\x2f\xfe\x30\xce\x5a\x96\x3a\xe2\x68\x96\x95\x54\x8c\x4f\xbc\xcb\x12\x0c\x2b\xb0\x21\x03\x1b\xf4\xb1\xdc\xd5\x15\x6a\x80\x40\xbd\x1a\xc3\x43\x70\x53\xf6\x77\x28\x07\x70\xc1\x79\x86\xaa\x9b\x6e\xdf\x14\xc6\xba\x1f\x40\xbb\x82\x9b\x3b\x61\x39\x94\xfe\xf3\x81\x33\x0d\x4a\x31\xc3\x7d\xdd\xa3\x6b\x77\x1c\x1d\xa5\xd4\xfa\x5d\xc4\xb7\x9f\x07\xc0\x0f\x17\x9f\xa1\xa0\x16\xc8\x35\xf8\x0d\x2e\xad\x1d\xb8\x42\x58\x10\x16\x4a\x6d\xb8\xbf\xa9\xa6\x4e\xa4\x92\xcf\x36\xdc\xcf\x86\xeb\xd9\xc3\x43\x90\x0a\x88\x9d\x43\xe4\xa8\xc9\xb9\xbb\xaf\x1c\x0b\xd6\xf4\x97\x37\xe1\xae\xc8\x68\xa7\xd7\x6e\xfb\xdb\x5e\x20\xc4\x3f\x24\x18\x81\x71\x14\x1d\x65\xc2\xb4\x56\x08\xf5\x1c\x08\x61\x55\x95\xe8\xda\xad\xbc\x41\xfb\x06\x45\x40\xa6\xef\x94\xd4\x74\x7c\x12\x3b\x02\x56\x1b\x89\xe5\x14\xf9\xb8\x2c\x1d\xa2\x23\x3c\xf2\x03\x39\x69\x27\x38\x3c\xec\xf2\x7d\x74\x64\x0b\xfa\xea\xf5\x4f\x36\x54\x56\xcf\xa7\x10\xfb\x6e\x47\x85\xec\xe5\xa1\x0d\xf5\xe7\xf0\xdb\x6f\x70\x34\xa4\xe8\x0d\xf0\x85\x70\x70\x02\xcf\x37\xd0\xf2\x2e\x68\x88\xbc\xa0\x4e\xfd\x46\xda\x1a\x50\xab\x5f\xc5\xf8\x0a\xc0\xf7\xf9\xfb\x70\x8c\x59\x9f\x33\xda\xe2\xe9\x01\x33\xc7\xf0\xd9\xa3\xb4\xc3\x47\x93\xa6\x7e\x86\x57\x5b\x2f\xe5\x83\x0c\x10\x72\xc3\x79\x05\x84\xfc\xa7\x16\x1c\x8f\x22\xd6\x65\xa1\x10\xeb\x4a\xba\xb6\x06\x49\x10\x3a\x09\xc3\xe2\xfe\xe6\xa2\xb7\xd3\xad\x5d\xcb\x39\x6a\x80\x2c\x7c\x75\x37\x7f\xac\xad\x88\xb5\x66\xab\x56\x6a\xdf\xbb\xe8\xa1\xec\xcc\x16\xad\xd2\xd8\x39\xae\xd6\x57\x40\xb7\xdc\x7d\x7c\x08\x05\x23\x96\x4c\x50\xe1\xca\xaf\xb1\x8a\x6a\x31\x27\x07\x70\x5d\x70\x98\x6b\xac\xc1\x7c\x6f\x2d\xb9\x0d\xc5\x1c\x68\x05\xb7\xd4\x08\x9a\x4a\x5f\xcc\x61\x79\x66\x38\xb4\x65\x76\xd6\xd6\x72\xa8\xb4\x1f\x33\xf3\xf5\xe8\xcc\xc3\x19\x4e\xad\x56\x30\xd7\xa6\x5f\xe7\x7e\xb4\xaf\x07\x85\x02\x57\x1b\x1c\xbb\x9c\x05\xd7\x9d\xed\x81\xd3\x06\xeb\x3f\xd2\x7e\x5d\x01\x8f\x0b\xc8\x28\x96\x7a\x42\xed\xf3\x4d\x43\xa8\xfe\x1a\x65\x2d\x75\x46\x01\x02\x93\x26\xd3\x6a\x3e\x5d\x25\xcf\x70\xeb\xa8\x8b\x4f\xfa\xfb\x31\x94\x11\xf9\xa6\x1b\x87\x67\x38\xe8\x2f\x7e\xf8\xb3\x9f\xdb\x0f\x71\x6f\xba\xcd\x35\x0e\x5f\xf1\xa2\x0e\x60\x10\xa7\x7d\x44\x6d\x0e\xa7\xd1\xa7\xbd\xff\x06\x00\x00\xff\xff\xf2\xba\x3c\x7c\xb3\x1d\x00\x00"

func rulesRulesNinjaBytes() ([]byte, error) {
	return bindataRead(
		_rulesRulesNinja,
		"rules/rules.ninja",
	)
}

func rulesRulesNinja() (*asset, error) {
	bytes, err := rulesRulesNinjaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules/rules.ninja", size: 7603, mode: os.FileMode(420), modTime: time.Unix(1534840966, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _rulesStaticNinja = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x31\x8f\xd4\x40\x0c\x85\xfb\xfc\x8a\x27\x65\x0b\x90\x4e\x59\xa0\x42\x48\x54\x57\x20\x3a\xa4\xa3\x5f\x79\x67\x9c\x8c\xb9\x59\x4f\xe4\x99\x64\xb5\x12\x3f\x1e\xcd\x24\x0b\x1c\x05\xba\x2a\xb1\xf3\xf9\xf9\xf9\xa5\xc7\x63\x9a\x6f\x26\x53\x28\xf8\xf0\xee\xfd\x47\x3c\xb9\x20\xe7\x5c\xd8\x77\x5d\x8f\xa7\x42\x45\x1c\x6c\x89\x9c\x31\x26\x83\x63\x2b\x24\x8a\x42\x36\x71\xc9\x03\xbe\x07\xc9\x18\x25\x32\x24\x43\xd4\xc5\xc5\xb3\x47\x52\xc7\x98\xd9\x30\x46\x5a\x93\x3d\x74\x3d\x16\x8d\xf2\xcc\x9b\xd4\xa0\xa2\x3f\xe8\x01\xd7\x20\x2e\xd4\x41\xc2\x14\xd3\x99\xe2\x5d\x61\xa8\xcb\x1f\x8d\xa9\x30\x08\xe7\x45\xa2\xc7\xca\x96\x25\xe9\x1d\xd9\x96\x92\x7a\x10\x02\xa9\xbf\xc1\xf3\xcc\x9e\xd5\xdd\x20\x63\x33\x5b\x82\xe8\x94\xbb\x1e\x25\x50\x81\x32\x7b\x94\x04\xe3\x4d\x4f\x46\x94\xc0\xff\x88\xbb\x40\x3a\x71\x1e\xba\xad\x7d\x10\x75\x5e\xec\xd8\xaa\xd3\x0e\x9d\x0e\xad\xdc\xab\x21\x7c\xc2\x8b\xcf\xff\x1b\xad\xb0\x68\x2e\x14\xe3\xc9\x25\x1d\x5f\xb7\xa0\x86\xf1\x85\x95\xad\xc6\x51\x3d\xaf\x64\x42\xe7\xdf\xff\x24\x5d\x66\x89\xa2\x13\x06\xd1\x16\x4b\x1e\xba\x1e\x47\xcf\xeb\x51\x97\x18\x5b\x30\xba\x27\x93\x31\x9b\x5c\xc8\x24\xde\x5e\x84\xa1\x43\xf3\x23\x0a\xe5\x2b\x7c\x72\xcf\x6c\x90\x0b\x4d\x9c\xf1\xe6\x2a\x25\xb4\xfe\xd7\x6f\xf9\xed\xd0\x89\x36\xf6\x33\x36\x9f\x25\xa5\x98\x8f\xbb\xc2\x5f\xd7\x27\x1d\xeb\xb5\xf5\x29\xd3\xce\xae\x64\x19\x87\xad\xd5\xde\x7f\xde\xd1\x8a\x88\x56\xad\x3f\xce\xbb\x5f\x01\x00\x00\xff\xff\x8f\x67\x6c\x0c\x9e\x02\x00\x00"

func rulesStaticNinjaBytes() ([]byte, error) {
	return bindataRead(
		_rulesStaticNinja,
		"rules/static.ninja",
	)
}

func rulesStaticNinja() (*asset, error) {
	bytes, err := rulesStaticNinjaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rules/static.ninja", size: 670, mode: os.FileMode(420), modTime: time.Unix(1534840966, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"internal/assets/main.go": internalAssetsMainGo,
	"internal/tools/copy_analyse.pl": internalToolsCopy_analysePl,
	"internal/tools/go-install.sh": internalToolsGoInstallSh,
	"internal/tools/gobuild.sh": internalToolsGobuildSh,
	"internal/tools/gperf_enum.pl": internalToolsGperf_enumPl,
	"internal/tools/header-install.sh": internalToolsHeaderInstallSh,
	"internal/tools/in.pl": internalToolsInPl,
	"internal/tools/link.pl": internalToolsLinkPl,
	"internal/tools/python-install.sh": internalToolsPythonInstallSh,
	"internal/tools/ronn_wrapper.sh": internalToolsRonn_wrapperSh,
	"internal/tools/swig_header.sh": internalToolsSwig_headerSh,
	"rules/compiler/clang.ninja": rulesCompilerClangNinja,
	"rules/compiler/gcc.ninja": rulesCompilerGccNinja,
	"rules/compiler-flavor/.gitkeep": rulesCompilerFlavorGitkeep,
	"rules/defaults.ninja": rulesDefaultsNinja,
	"rules/flavor/dev.ninja": rulesFlavorDevNinja,
	"rules/flavor/gcov.ninja": rulesFlavorGcovNinja,
	"rules/flavor/release.ninja": rulesFlavorReleaseNinja,
	"rules/rules.ninja": rulesRulesNinja,
	"rules/static.ninja": rulesStaticNinja,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"internal": &bintree{nil, map[string]*bintree{
		"assets": &bintree{nil, map[string]*bintree{
			"main.go": &bintree{internalAssetsMainGo, map[string]*bintree{}},
		}},
		"tools": &bintree{nil, map[string]*bintree{
			"copy_analyse.pl": &bintree{internalToolsCopy_analysePl, map[string]*bintree{}},
			"go-install.sh": &bintree{internalToolsGoInstallSh, map[string]*bintree{}},
			"gobuild.sh": &bintree{internalToolsGobuildSh, map[string]*bintree{}},
			"gperf_enum.pl": &bintree{internalToolsGperf_enumPl, map[string]*bintree{}},
			"header-install.sh": &bintree{internalToolsHeaderInstallSh, map[string]*bintree{}},
			"in.pl": &bintree{internalToolsInPl, map[string]*bintree{}},
			"link.pl": &bintree{internalToolsLinkPl, map[string]*bintree{}},
			"python-install.sh": &bintree{internalToolsPythonInstallSh, map[string]*bintree{}},
			"ronn_wrapper.sh": &bintree{internalToolsRonn_wrapperSh, map[string]*bintree{}},
			"swig_header.sh": &bintree{internalToolsSwig_headerSh, map[string]*bintree{}},
		}},
	}},
	"rules": &bintree{nil, map[string]*bintree{
		"compiler": &bintree{nil, map[string]*bintree{
			"clang.ninja": &bintree{rulesCompilerClangNinja, map[string]*bintree{}},
			"gcc.ninja": &bintree{rulesCompilerGccNinja, map[string]*bintree{}},
		}},
		"compiler-flavor": &bintree{nil, map[string]*bintree{
			".gitkeep": &bintree{rulesCompilerFlavorGitkeep, map[string]*bintree{}},
		}},
		"defaults.ninja": &bintree{rulesDefaultsNinja, map[string]*bintree{}},
		"flavor": &bintree{nil, map[string]*bintree{
			"dev.ninja": &bintree{rulesFlavorDevNinja, map[string]*bintree{}},
			"gcov.ninja": &bintree{rulesFlavorGcovNinja, map[string]*bintree{}},
			"release.ninja": &bintree{rulesFlavorReleaseNinja, map[string]*bintree{}},
		}},
		"rules.ninja": &bintree{rulesRulesNinja, map[string]*bintree{}},
		"static.ninja": &bintree{rulesStaticNinja, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

